{
    "version": "https://jsonfeed.org/version/1",
    "title": "GWXX • All posts by \"malware\" tag",
    "description": "",
    "home_page_url": "http://Aer0Liteee.github.io",
    "items": [
        {
            "id": "http://aer0liteee.github.io/post/f862a75e.html",
            "url": "http://aer0liteee.github.io/post/f862a75e.html",
            "title": "Cyber-Code-Intelligence-for-malware-detection",
            "date_published": "2023-07-09T10:15:13.000Z",
            "content_html": "<h1 id=\"cyber-code-intelligence-for-malware-detection\"><a class=\"markdownIt-Anchor\" href=\"#cyber-code-intelligence-for-malware-detection\">#</a> Cyber Code Intelligence for malware detection</h1>\n<p>[TOC]</p>\n<h2 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h2>\n<p>​\t不断演变的安卓恶意软件对移动用户构成了严重的安全威胁，基于机器学习 (ML) 的防御技术吸引了积极的研究。由于缺乏知识，许多<strong>零日家族的恶意软件</strong>可能仍然没有被发现直到分类器获得专门的知识。<u>大多数现有的基于 ML 的方法将需要很长的时间来学习最新的恶意软件家族景观中的新恶意软件家族</u>。现有的基于 ML 的 Android 恶意软件检测和分类方法很难应对恶意软件的快速演变，特别是在零日恶意软件家族的出现和单视图特征的有限代表性方面。</p>\n<h2 id=\"目的\"><a class=\"markdownIt-Anchor\" href=\"#目的\">#</a> 目的</h2>\n<p>​\t在这篇文章中，我们开发了一个新的 **<u>多视图特征智能 (MFI)</u>** 框架，<u>从已知的恶意软件家族中学习目标能力的表示，以识别具有相同能力的未知和不断变化的恶意软件</u>。</p>\n<p>​\t新框架执行逆向工程以提取多视图异质特征包括：</p>\n<ol>\n<li>\n<p>语义字符串特征、</p>\n</li>\n<li>\n<p>API 调用图特征</p>\n</li>\n<li>\n<p>smali 操作码（<strong><u>smali opcode</u></strong>）顺序特征。</p>\n<ul>\n<li>\n<p><strong>Smali Opcode</strong> 是一种用于描述 Android Dalvik 虚拟机指令的语言。<u>Dalvik 虚拟机是 Android 操作系统上运行应用程序的基础</u>。</p>\n<p>Smali Opcode <u>使用基于文本的语法来描述 Dalvik 字节码指令</u>。<u>它是一种类汇编语言，用于编写和修改已编译的 Android 应用程序的字节码</u>。</p>\n<p>每个 Dalvik 指令都由<u>一个操作码（opcode）和零个或多个操作数</u>组成。操作码表示特定操作的类型，例如加载值到寄存器、进行算术运算或跳转等。操作数提供了指令所需的数据。</p>\n<p>Smali Opcode 在文本文件中按顺序列出指令，并使用特定的语法来定义操作码和操作数。示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const/4 v0, 0x1</span><br><span class=\"line\">const/16 v1, 0x64</span><br><span class=\"line\">add-int v2, v0, v1</span><br><span class=\"line\">return v2</span><br></pre></td></tr></table></figure>\n<p>上述示例中的代码片段演示了一些常见的 Smali Opcode。其中，指令  <code>const/4</code>  将整数常量值（0x1）加载到寄存器  <code>v0</code>  中，指令  <code>const/16</code>  加载整数常量值（0x64）到寄存器  <code>v1</code>  中，指令  <code>add-int</code>  将寄存器  <code>v0</code>  和  <code>v1</code>  中的值相加，并将结果放入寄存器  <code>v2</code>  中，最后的  <code>return</code>  指令将结果从方法中返回。</p>\n<p>通过<u>使用 Smali Opcode，开发人员可以直接修改编译后的应用程序的字节码，以实现一些高级功能、优化性能或进行代码混淆等操作</u>。然而，修改已编译的字节码需要对 Smali Opcode 语法和 Dalvik 指令集有一定的了解。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>​\t它可以通过一系列的<u>特征分析、选择、聚合和编码过程</u>从已知的恶意软件家族中学习目标能力的表示，以检测具有共享目标能力的未知 Android 恶意软件。我们创建了一个新的数据集，其中有关于能力的真实信息。在新数据集上进行了许多实验，以评估新方法的性能和有效性。结果表明，在检测具有目标能力的未知 Android 恶意软件时，新方法优于三种最先进的方法，包括:</p>\n<ol>\n<li>Drebin</li>\n<li>MaaDroid</li>\n<li>N-opcode</li>\n</ol>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>​\tAndroid 在移动操作系统中占<strong>主导地位</strong>，全球有<u>74.13%</u>的手机运行安卓系统。根据 Statista 的报告，在 2019 年 12 月。仅在官方的 GooglePlay 应用商店中，就有近 300 万个 Android 应用软件。在 2020 年第一季度，尽管从 2018 年初 360 万的峰值下降，但仍有很多应用程序可用 。<u>安卓系统的普及为安卓恶意软件作者提供了激励</u>，而<u>对安卓应用程序进行逆向工程的方法相对容易</u>，导致安卓恶意软件的蓬勃发展。</p>\n<p>​\tAndroid 恶意软件家族存在三个主要问题。</p>\n<ol>\n<li>首先，在<u>建立安卓恶意软件家族方面没有统一的标准</u>，因此大多数反病毒公司对家族的命名都不一样。这种临时性的方法为快速分享零日恶意软件的知识造成了障碍。ViruusTotal 通过应用多数投票策略，为特定的恶意软件样本确定一个单一家族的类别标签，从而缓解了命名不一致的问题。</li>\n<li>其次，安卓恶意软件家族的数量在 2018 年超过了 1000 个 ，并且不断激增，没有任何放缓的迹象。由于人类的错误和误判，安卓恶意软件家族的<u>爆炸性增长</u>挑战了从人类专家到基于 ML 的检测器的知识转移。</li>\n<li>第三，<u>安卓恶意软件家族的分布是高度倾斜</u>的，因为在大多数家族中只有少数几个样本可用。例如，在大约 58% 的 Android 恶意软件家族中，只有不到五个样本在 Drebin 数据集中。<u>安卓恶意软件的高度不平衡分布，对特征分析和模式识别的过程提出了挑战</u>。因此，需要另一种替代性的分类方法来检测安卓零日恶意软件。</li>\n</ol>\n<h3 id=\"主要贡献\"><a class=\"markdownIt-Anchor\" href=\"#主要贡献\">#</a> 主要贡献</h3>\n<p>​\t\t这篇文章的主要贡献有三方面。</p>\n<ol>\n<li>\n<p><u>对安卓恶意软件的恶意能力进行了深入的分析</u>，并<u>创建了一个带有验证过的地面真实性分配的数据集</u>，<u>用于检测具有针对性能力的不断发展的安卓恶意软件</u>。（这个名为 &quot;<strong><u>CAPA</u></strong>&quot; 的新数据集将向公众发布为 Android 恶意软件的新研究提供启示。）</p>\n</li>\n<li>\n<p>我们提出了一种新的<u>多视图特征智能 (MFI)</u> 方法。MFI 提取多视图异质特征 (源代码视图、API 图形调用视图和 smali 操作码视图。<u>MFI 将这些特征聚集成一个统一的表示，用于描述恶意的能力</u>。此外，MFI 表示可以被送入一个神经模型，以识别具有目标能力的零日恶意软件。</p>\n</li>\n<li>\n<p>我们进行了大量的实验，从几个方面评估新的 MIFI 方法，包括<u>识别精度、处理零日系恶意软件的有效性、识别效果和可扩展性</u>。MFI 胜过了三种最先进的方法，包括:</p>\n<ul>\n<li>Drebin</li>\n<li>MaMaDroid</li>\n<li>N-opcode</li>\n</ul>\n<p>在检测具有目标能力的未知安卓恶意软件时。这项工作的所有数据、代码和报告都将在 Github 上发布 (<a href=\"https://github.com/JunTomyang/Android-Malware-Capability-Identification\">https://github.com/JunTomyang/Android-Malware-Capability-Identification</a>)</p>\n</li>\n</ol>\n<h3 id=\"文章结构\"><a class=\"markdownIt-Anchor\" href=\"#文章结构\">#</a> 文章结构</h3>\n<p>​\t\t本文的其余部分结构如下：</p>\n<ul>\n<li>第二节介绍了<u>Android 恶意软件检测和家族分类的相关工作</u></li>\n<li>第三节<u>讨论我们提出的方法</u></li>\n<li>第四节介绍了与<u>基线方法的比较实验和一些详细的分析</u></li>\n<li>第五节给出<strong>结论</strong></li>\n</ul>\n<h2 id=\"相关工作\"><a class=\"markdownIt-Anchor\" href=\"#相关工作\">#</a> 相关工作</h2>\n<p>​\t表一比较和对比了我们的研究工作和最先进的工作，包括 DroidAPIMiner、Drebin 、DroidSIFT、HinDroid、MaMaDroid 和 ASTROID。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64a980f11ddac507ccb84e3d.jpg\" alt=\"表一 &amp;&amp; 图一\"></p>\n<p>​\t我们专注于开发一种新的 MFI 方法，以识别具有目标能力的不断发展的 Android 恶意软件。这项工作的目的是<u>识别零日家族的新恶意软件样本</u>。</p>\n<h2 id=\"u网络代码情报的新方法u\"><a class=\"markdownIt-Anchor\" href=\"#u网络代码情报的新方法u\">#</a> <u>网络代码情报的新方法</u></h2>\n<p>​\t\t图 1 概述了我们提出的用于检测具有目标能力的恶意软件的 MFI。我们将恶意能力识别作为一个二元分类问题。一类是具有目标能力的恶意软件，而另一类则没有这种能力。给出原始 APK 样本，进行逆向工程以拆解二进制代码，然后提取多视图异质特征来重新发送恶意软件样本。将进行特征编码和聚合，以去除噪声和不相关的特征，并将多视图特征转换为向量，从而准确反映恶意软件恶意能力的内在特征。应用深度神经模型对输入的表示向量进行二元分类。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64a982641ddac507ccbb69bc.jpg\" alt=\"多视图特征智能 (MFI)框架流程图 \"></p>\n<ul>\n<li>\n<p><strong>MFI 流程图</strong></p>\n<ul>\n<li>收集特定能力的训练恶意软件</li>\n<li>静态分析的逆向工程</li>\n<li>从反汇编的代码中解析原始信息</li>\n<li>提取多视图异构特征</li>\n<li>异构特征预处理</li>\n<li>多视图特征融合</li>\n<li>训练深度神经网络进行能力识别</li>\n</ul>\n<h3 id=\"新数据和地面实况\"><a class=\"markdownIt-Anchor\" href=\"#新数据和地面实况\">#</a> 新数据和地面实况</h3>\n<p>​\t当把大量的安卓恶意软件与适当的安全 / 隐私相关能力联系起来时，MFI 的直接挑战之一就出现了。据我们所知，在现有的研究数据集中，<u>安全 / 隐私相关的能力没有明确的标签</u>。由于缺乏定义明确的基础真相，现有的公开可用的安卓系统恶意软件数据集需要进一步的标记过程。因此，我们创建了一个<strong>带有能力注释的安卓恶意软件数据集</strong>，我们将其称为 **<u>CAPA 数据集</u>**。</p>\n<p>​\t<u>CAPA 数据集是通过聚合两个著名的安卓恶意软件数据集 Drebin 和 AMD 得到的</u>。</p>\n</li>\n<li>\n<p><strong>Drebin 数据集</strong>包含 5560 个安卓恶意软件应用，来自于 2010 年 8 月至 2012 年 10 月期间收获了 179 个恶意软件家族。</p>\n</li>\n<li>\n<p><strong>AMD 数据集</strong>包含 2010 年至 2016 年期间收集的 71 个不同恶意软件家族的 24 553 个 Android 恶意软件样本。</p>\n<blockquote>\n<p>AMD 数据集比 Drebin 数据集要新，被社区的研究人员广泛使用。</p>\n</blockquote>\n</li>\n</ul>\n<p>​\tCAPA 数据集由 2010 年至 2016 年七年间的 Android 恶意软件样本组成。随着 17 个家族在 Drebin 和 AMD 数据集之间的重复，<u>在最新版本的 CAPA 数据集中，总共包括 72 个家族或 7110 个应用程序。</u></p>\n<p>​\t为了验证我们提出的 MFI 的有效性，作为一个概念证明，我们选择了四种非常常见的能力作为案例研究，它们与四个主要的网络安全问题非常一致: <strong>远程控制、特权、货币化和隐私</strong>。不出所料，<u>许多恶意样本拥有这四种能力中的一种或几种</u>：</p>\n<ol>\n<li>僵尸网络攻击 (远程控制)</li>\n<li>未经授权的 root 访问 (权限)</li>\n<li>恶意短信收费 (货币化)</li>\n<li>窃取信息 (隐私)</li>\n</ol>\n<p>能力类别的完整列表见表二</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa0fed1ddac507cc6cf914.png\" alt=\"与安全/隐私相关的能力列表\"></p>\n<h3 id=\"多视图异构结构特征\"><a class=\"markdownIt-Anchor\" href=\"#多视图异构结构特征\">#</a> 多视图异构结构特征</h3>\n<p>​\t为了全面描述安卓恶意软件，以便更好地识别与安全隐私有关的能力，我们提取了三个异质特征的视图来代表安卓恶意软件样本。</p>\n<ol>\n<li>\n<p><strong>源代码中的语义字符串特征:</strong></p>\n<p>​\t在这项工作中，从<strong> AndroidManifestxml</strong> 文件中提取各种类型的语义信息以形成特征。 <u>AndroidManifestxm 文件驻留在所有 Android 应用包的根目录中，并向 Android 系统提供关于应用的基本信息</u>。这四个基本信息来源包括：</p>\n<ul>\n<li><strong>应用程序要求的权限</strong></li>\n<li><strong>应用程序的软件组件</strong></li>\n<li><strong>应用程序要求的硬件组件</strong></li>\n<li><strong>过滤的意图</strong></li>\n</ul>\n<p>​    这四类信息可以被有效提取，以反映安卓应用的部分特征。具体来说，<u>安卓应用在访问包含敏感信息的资源之前，需要请求终端用户授予某些权限</u>。</p>\n</li>\n<li>\n<p><strong>第二个主要的信息来源是从字节码 classes.dex 文件中提取的：</strong></p>\n<p>​\t对字节码进行反汇编，以检索语义信息，包括应用中使用的 API 调用和数据。四个基本信息源包括：</p>\n<ul>\n<li><strong>受限的 API 调用</strong></li>\n<li><strong>可疑的 API 调用</strong></li>\n<li><strong>使用的权限</strong></li>\n<li><strong>网络地址</strong></li>\n</ul>\n<p>​    这四种类型的信息提供了字节码的足迹。具体来说，<u>受限的 API 调用表明应用程序的敏感功能</u>；<u>可疑的 API 调用暴露了 Android 恶意软件的安全 / 隐私相关行为</u>；<u>权限信息共同反映了多个 API 调用的关系</u>；<u>网络地址可能与已知的恶意网站或僵尸网络有关</u>。</p>\n<p>​\t为了从原始恶意软件中获得这些字符串特征，我们使用开源工具 Androguard ( <a href=\"https://github.com/androguard/androguard\">https://github.com/androguard/androguard</a>)。 Androguard 帮助我们从 classes.dex 文件中拆解字节码，并根据上述类别从 AndroidManifest.xml 文件中收集信息。提取的信息形成了语义特征，可以有效地在源代码层面上表示 Android 恶意软件。</p>\n<p>​\t<strong>Androguard</strong> 是使用 Python 编写的逆向工具，它可以在多个平台上运行 Linux/Windows/OSX。使用它可以反编译 android 应用，也可以用来做 android app 的静态分析（static analysis）</p>\n<ul>\n<li>\n<p><strong><a href=\"http://androapkinfo.py\">androapkinfo.py</a></strong> 查看 apk 文件的包、资源、权限、组件、方法等信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">./androapkinfo.py -i ./test.apk</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong><a href=\"http://androxml.py\">androxml.py</a></strong> 解密 apk 包中的 AndroidManifest.xml 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">./androxml.py -i -i ./test.apk</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>​    在这篇文章中，我们捕获了结构性 API 调用图，以减轻 Android 恶意软件数据集中的规避样本，下图 2 显示了提取 API 调用图特征的过程。<u>API 调用图被提取并嵌入到矢量表示中，旨在捕获恶意软件的行为</u>。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa18541ddac507cc7e292e.jpg\" alt=\"API调用图特征的过程\"></p>\n<ul>\n<li>提取 API 调用图</li>\n<li>抽象 API 到家庭颗粒度</li>\n<li>将 API 调用图嵌入到 向量中</li>\n</ul>\n</li>\n<li>\n<p><strong>来自中间的 smali 代码的操作码顺序特征：</strong></p>\n<p>​\t作为字节码 classes.dex 文件的汇编器 / 反汇编器，<u>smali/baksmali 提供 smali 语言的人类可读代码</u>， <u>smali 代码比 Dalvik 虚拟机用来执行 Android 应用程序的机器代码更容易解释</u>。</p>\n<p>​\t在本文中，根据 smali 编程规范，字节码 classes.dex 文件被拆解为一组 smali 代码。classes.dex 文件中的每个类都被翻译成一个单独的 smali 文件，每个 smali 文件都包含相应类中的多个方法。<u>每个 smali 条目由个操作码和多个操作数组成</u>，其格式为人类可读的。</p>\n<p>​\t<u>操作码被分为七个核心指令集以简化分类器的设计</u>, 具体来说，这些指令集是<strong> Move,Return,Goto,If,Get,Put,Invoke</strong>。操作码的分离有助于有效地区分相关的操作数，表三总结了指令集的七种类型。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa18e11ddac507cc7f7e56.png\" alt=\"指令集的七种类型\"></p>\n<p>​\t随后，获得一个 n-grams（n 元语法）表示，以代表安卓恶意软件。对于一个完整的表示，<u>通过遍历翻译后的 smali 文件来提取操作码序列，以保留 Android 恶意软件的信息，这种安排保证了在 smali 操作码级别的粒度</u>。</p>\n</li>\n</ol>\n<h3 id=\"特征编码和聚合\"><a class=\"markdownIt-Anchor\" href=\"#特征编码和聚合\">#</a> 特征编码和聚合</h3>\n<p>​\t\t在这项工作中，<strong>多视图的异构特征被预先处理，以形成最终的联合向量表示</strong>。为了减少特征维度，去除不相关的特征，缓解下面深度神经网络的复杂性，对于源码中的语义字符串特征，我们根据不同的安全 / 隐私相关能力的特点选择关键的特征子集。例如，对于，恶意短信战能力，将选择<u>SEND SMS</u>、<u>RECEIVE SMS</u> 和<u>WRITE SMS</u>相关的权限特征。</p>\n<blockquote>\n<p><strong>SMS</strong> 是<u>Short Messaging Service（短消息服务）</u>的缩写，是一种使用移动设备可以发送和接收文本信息的技术短信内容，以文本、数字或二进制非文本数据为主，目前，这种短消息的长度被限定在 140 字节之内。</p>\n</blockquote>\n<p>​\t对于结构性 API 调用图的特点，如图 2 所示，以提高对 API 变化的弹性并实现可扩展性。因此，所有的 API 调用都被抽象为开发者定义的家族、混清的家族或九个安卓原生家族之一，包括:</p>\n<p>​\tl) com.google 2) xml 3) apache 4)javax 5) java 6) android 7) dom 8) json 9) dalvik</p>\n<p>​\t这些家族是 Android 操作系统的一部分，<u>它们提供了许多不同的 API，可以用于开发 Android 应用程序</u>，这些 API 包括网络、数据库、图形、用户界面和其他功能。</p>\n<p>​\t在所有视图的特征向量生成后，<u>我们将这些特征向量汇总，为每个恶意软件应用构建一个联合特征向量</u>。因此，<strong>最终的特征向量有 149 个维度</strong>。</p>\n<h3 id=\"通过神经模型进行能力识别\"><a class=\"markdownIt-Anchor\" href=\"#通过神经模型进行能力识别\">#</a> 通过神经模型进行能力识别</h3>\n<p>​\t在这一步，安全 / 隐私相关的能力识别任务被执行，即识别具有信息窃取能力的 Android 恶意软件。最近的一个趋势显示，基于深度神经网络的解决方案在检测安卓恶意软件方面很受欢迎。<u>一旦用高质量的数据进行训练，深度神经网络可以有效地学习安卓恶意软件的复杂特征和行为</u>。在这篇文章中，我们构建了一个深度神经网络架构来进行能力识别任务，同时<strong>通过对安卓恶意软件的紧凑表示来实现高的能力识别精度</strong>。</p>\n<p>​\t对于具体的能力，网络结构在层数和神经元的数量上有微小的变化。<strong>优化器</strong>从<u>&quot;SGD”、&quot;Adadelta”、&quot;RMSprop 和&quot;Adamax&quot;</u>中选择。而<strong>损失函数</strong>的选择是 “<u>binary crossentropy</u>”。<strong>过度拟合是深度神经网络的主要问题之一</strong>，在这项工作中，<strong>为了缓解过拟合的问题，我们应用了 dropout 正则化技术</strong>。</p>\n<p>​\t在我们的深度神经网络的训练阶段，验证集是用训练集的 20% 形成的，以监测训练集和验证集的准确性趋势。<strong>验证集表明模型的训练是否正确，是否有过度拟合</strong>。如果训练集和验证集的精度增长明显不同，那么学习过程将被终止，并在重新开始训练过程之前修改建模参数以避免过拟合问题。</p>\n<h2 id=\"对mfi的性能评估\"><a class=\"markdownIt-Anchor\" href=\"#对mfi的性能评估\">#</a> 对 MFI 的性能评估</h2>\n<h3 id=\"实验环境\"><a class=\"markdownIt-Anchor\" href=\"#实验环境\">#</a> 实验环境</h3>\n<p>​\t为了验证我们提出的 MFI 的有效性，作为概念验证，本文选择了<strong>四</strong>种常见的、具有代表性的安全 / 隐私相关功能（<strong>僵户网络政击、未经授权的根访问、恶意短信收费和信息窃取</strong>）作为案例研究来进行实验。为了模拟零日恶意软件家族的识别，<u>训练数据只包括恶意软件家族的一个子集</u>，而<u>测试集包含在训练过程中未见过的恶意软件家族</u>。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa2d9a1ddac507cca69446.jpg\" alt=\"数据集信息\"></p>\n<p>​\t表四中列出了用于<u>零日家族恶意软件能力识别的数据集的信息</u>。在训练深度神经网络时，<strong>20% 的训练集被随机分割为验证集</strong>，<strong>深度神经网络是用 Keras 库、Scikit-learn 和 Tensorflow 实现的</strong>。</p>\n<h3 id=\"mfi与最先进的方法的比较\"><a class=\"markdownIt-Anchor\" href=\"#mfi与最先进的方法的比较\">#</a> MFI 与最先进的方法的比较</h3>\n<p>​\t现有的工作没有解决李日家族恶意软件的安全隐私相关能力识别问题。我们选择了三个<strong>能够进行恶意软件家族分类的基线模型</strong>，包括（前文提到）：</p>\n<ol>\n<li><strong>Drebin</strong> 是第一个用线耳支持向量机分类器进行家庭分类任务的基线方法。</li>\n<li><strong>MaMaDroid</strong> 是第二种基线方法，采用恶意软件家族模式和随机森林分类器。</li>\n<li><strong>N-opcode</strong> 是第三种基线方法，N=4，采用随机森林算法。</li>\n</ol>\n<blockquote>\n<p><strong>基线方法</strong>是指在机器学习中，<u>使用一些简单的模型作为基准，然后使用更复杂的模型来比较性能</u>。这些简单的模型被称为基线模型，它们可以是随机分类器、最常见类别分类器、简单线性回归和常数预测等。</p>\n</blockquote>\n<p>下图表五列出了我们提出的 MFI 和基线方法之间的性能比较</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa2f831ddac507cca9bb9c.jpg\" alt=\"\"></p>\n<p>​\t在表五中，不难发现，<strong>MFI 在识别安全 / 隐私相关能力方面均优于基线方法</strong>。MFI 的成功归功于三个因素 - 多视图异构特征：<u><strong>基于领域知识的特征选择</strong></u>和<u><strong>API 调用抽象</strong></u>，以及<u><strong>微调的深度神经网络架构</strong></u>。</p>\n<h3 id=\"对能力依赖的理解\"><a class=\"markdownIt-Anchor\" href=\"#对能力依赖的理解\">#</a> 对能力依赖的理解</h3>\n<p>​\t<strong>选择适当的特征来反映特定能力的内在特征</strong>，对于准确捕捉不同安全 / 隐私相关能力的模式至关重要。因此，我们进一步确认并确保权限包龄和 API 调用的功能与 Android 开发者文档中的描述一致</p>\n<ul>\n<li>\n<p><strong>僵尸网络</strong>攻击能力的特征是根据以下三个标准来选择的：</p>\n<ul>\n<li>标准 1：与网络或 WiFiManger 有关的权限和 API 调用功能。</li>\n<li>标准 2：与 PushService 或 HttpConnection 相关的服务或 API 调用功能。</li>\n<li>标准 3：一些不受信任的网络地域如 URL 功能。</li>\n<li><strong>僵尸网络遭网络功击能力的特征数量为 100</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>具有未经授权的 root 访问能力的恶意软件将削弱安卓设备的安全性并获得特权访问</strong>。</p>\n<ul>\n<li>恶意软件在获得 root 权限后可以做的事情将没有限制。像 <u>REBOOT</u>、<u>ACCESS _SUPERUSER</u>或<u>exec()</u>等功能将被识别。</li>\n<li>如果满足以下标准之一，那么该功能将被选择为未经授权的 root 访问能力。\n<ul>\n<li>标准 1：与<strong> System/bin/su</strong> 有关的 API 调用特征或 <strong>Ljava/Lang/Runime—&gt;exec</strong></li>\n<li>标准 2：PackageManager 相关的权限或 API 调用功能，包括在安装软件包、卸载 软件包、更新软件包、删除软件包和重言软件包等方面</li>\n<li>标准 3： 与 <strong>Bool_Compleled</strong> 或<strong> update_device_state</strong> 有关的服务和 BroadCast Receiver 特性。</li>\n<li>标准 4：与<strong> Receive_Boot_Compleled</strong> 相关的意图和行动特征。</li>\n</ul>\n</li>\n<li><strong>未经授权的 root 访问能力的特征数量为 160</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>恶意软件</strong>拥有恶意短信收费能力，可<u>在用户不知情的情况下在后台向高级服务发送短信</u></p>\n<ul>\n<li>所选择的与短信有关的功能包括\n<ul>\n<li><strong>WRITE SMS 、SEND SMS 、sendTextmessage()</strong></li>\n</ul>\n</li>\n<li>详细的功能选择标准如下。\n<ul>\n<li>标准 1：Sms Manager 相关的权限和 API 调用功能，包括<u>send_sms</u>、<u>receive_sms</u>和<u>write_sms</u>。</li>\n<li>标准 2：行动和服务功能，包括<u>Data_Sms_Received</u> 和 <u>Smssenderservice</u></li>\n<li>标准 3：BroadCastReceiver 的相关功能，包括<u>SmsReceived</u>和<u>MessageReceived</u>。</li>\n</ul>\n</li>\n<li><strong>恶意短信收费能力的特征数量为 80 个</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>信息窃取</strong>功能将收集用户的感性和隐私信息如联系人名单、位置或设备 ID，然后将其发送到远程服务器。</p>\n<ul>\n<li>\n<p>以下 5 条标准适用于信息窃取能力的过滤特征</p>\n<ul>\n<li>\n<p>标准 1：涉及<u>敏感位置信息</u>的特征 ，包括<strong> access_coarse_location,</strong></p>\n<p><strong>access_fifine_location 和 locationmanager</strong></p>\n</li>\n<li>\n<p>标准 2：<u>私人信息</u>相关的功能，包括<strong> read_contacts,read_logs, read_history_bookmarks 和 read_phone_state</strong></p>\n</li>\n<li>\n<p>标准 3：<u>不受信任的网络地址 URL</u></p>\n</li>\n<li>\n<p>标准 4：SmsManager 相关权限和 API 调用功能，包括<strong> send_sms、receive_sms 和 write_sms</strong></p>\n</li>\n<li>\n<p>标准 5：行动和服务特征，包括<strong> Data_Sms_Received 和 SmsSenderService.</strong></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>信息窃取能力的特征数量为 60。</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>​\t为了研究能力相关特征选择的有效性，以<u>恶意短信收费能力</u>为例，我们使用 t 分布式随机邻居嵌入 (t-SNE) 算法展示了测试恶意软件的可视化。t-SNE 是一种降维的方法，特别适合数据集的可视化。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa394d1ddac507ccbda536.jpg\" alt=\"图3\"></p>\n<p>​\t图 3 (a) 是使用完整特征集的恶意软件的可视化结果，而图 3 (b) 显示的是基于选定的能力相关特征的结果。<strong>红点表示拥有恶意短信收费能力的恶意软件，而绿点表示没有恶意短信收费能力的恶意软件样本</strong>。因此，所选择的特征是有辨别力的。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa39ac1ddac507ccbe470b.jpg\" alt=\"图4\"></p>\n<p>​\t<strong>Baseline</strong> 是使用完整特征集的结果  <strong>CDFS</strong> 是指使用所选的依赖能力的特征子集的性能</p>\n<p>​\t因为使用与能力相关的特征有明显的可视化结果。我们还在图 4 中展示了使用全部特征集或选定的能力相关特征的直接性能 (<strong>准确度得分和 F1 得分</strong>) 的比较。因此，<u>使用选定的特征集会有很大的改进</u>。</p>\n<h3 id=\"单视图与多视图功能\"><a class=\"markdownIt-Anchor\" href=\"#单视图与多视图功能\">#</a> 单视图与多视图功能</h3>\n<p>​\t本实验验证了多视图功能是否比单视图功能提供更好的性能，同时确定了零日家庭的安全 / 隐私相关能力。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa3bb61ddac507ccc1eea1.jpg\" alt=\"表6\"></p>\n<p>​\t实验结果列于表六。<strong>多视图特征的结果优于单视图特征</strong>，在准确率得分和 F1 得分方面分别有大约 1%-4% 和 2%-4% 的提高。</p>\n<p>​\t在这项工作中，深度神经网络被设计用来识别恶意软件的安全 / 隐私相关能力。我们研究了识别遭广网各政击能力的深度神经网络的训练和验证损失。<u>训练后的深度神经网络在 300 个 epochs 内迅速收敛</u>。多视图异构特征的直接融合在识别安全 / 隐私相关能力方面的辨别力不够，然而<u>通过使用深度神经网络，可以学习到紧凑的、有鉴别力的表述</u>。这些结果表明，所创建的深度神经网络在聚合多视图异构特征方面是强大的。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>​\t在这篇文章中，提出了一个新的问题来识别<strong>零日安卓恶意软件</strong>。为了解决所提出的研究问题，我们设计了一种新的轻量级方法<strong> MFI</strong> 来<u>自动识别新检测到的 Android 恶意软件的能力</u>。为了充分捕捉恶意软件的能力特征 MFI，我们<u><strong>使用多视图异构特征来表示每个恶意软件</strong>，包括来自源代码的语义字符串特征、结构性 API 调用图特征和 smali 操作码序列特征。</u>我们还设计了一个基于源代码视图的能力相关特征视图。对于每个给定的能力，一个单一的深度神经网络将被训练，以确定测试的恶意软件是否具有特定能力。</p>\n<p>​\t在这项工作中，深度神经网络被设计用来识别恶意软件的安全 / 隐私相关能力。多视角异质特征的直接融合在识别安全隐私相关能力方面的区分度不够。<strong>通过使用深度神经网络，可以学习到紧凑的、有辨别力的表征。这些结果表明，创建的深度神经网络在聚合多视角异质特征方面是强大的。</strong></p>\n",
            "tags": [
                "malware"
            ]
        }
    ]
}