{
    "version": "https://jsonfeed.org/version/1",
    "title": "Aer0Lite • All posts by \"gnn\" tag",
    "description": "",
    "home_page_url": "http://Aer0Liteee.github.io",
    "items": [
        {
            "id": "http://aer0liteee.github.io/post/33e09c9c.html",
            "url": "http://aer0liteee.github.io/post/33e09c9c.html",
            "title": "GNN-summary",
            "date_published": "2023-07-05T09:30:02.000Z",
            "content_html": "<h1 id=\"gnn\"><a class=\"markdownIt-Anchor\" href=\"#gnn\">#</a> GNN</h1>\n<h4 id=\"应用领域\"><a class=\"markdownIt-Anchor\" href=\"#应用领域\">#</a> 应用领域</h4>\n<ul>\n<li></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">场景分析与问题推理、推荐系统、欺诈检测、知识图谱、道路交通、自动驾驶、化学医疗场景......</span><br></pre></td></tr></table></figure>\n<h4 id=\"图基本模块定义\"><a class=\"markdownIt-Anchor\" href=\"#图基本模块定义\">#</a> 图基本模块定义</h4>\n<ul>\n<li>\n<img src=\"F:\\TODOIT\\GNN\\1.png\" alt=\"1\" style=\"zoom:150%;\" />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GNN 又称图神经网络，是一种直接作用于图结构的神经网络，我们可以把图中的每一个结点 V 当作个体对象，而每一条边 E 当作个体与个体间的某种联系，所有结点组成的关系网就是最后的图 U</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"邻接矩阵的定义\"><a class=\"markdownIt-Anchor\" href=\"#邻接矩阵的定义\">#</a> 邻接矩阵的定义</h4>\n<ul>\n<li>\n<img src=\"F:\\TODOIT\\GNN\\2.png\" alt=\"2\" style=\"zoom:50%;\" />\n<blockquote>\n<ul>\n<li>用于表示结点之间相邻的情况，由于图的稀疏性，因此一般的邻接矩阵不是一个 N*N 的矩阵，而保留了 **(source,target)** 的形式，如 [1,0] 则表示起点为 1 终点为 0。</li>\n<li>每个点通过与它相邻的<strong>邻居</strong>来进行<strong>更新</strong>，更新的方式可以自己设置。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"适用规则\"><a class=\"markdownIt-Anchor\" href=\"#适用规则\">#</a> 适用规则</h4>\n<ul>\n<li></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GNN主要用于解决输入数据不规则的时候，由于图像和文本任务中输入格式很固定，因此图模型并不常用，图网络和其他的神经网络类似都是需要进行特征提取</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息传递方法计算\"><a class=\"markdownIt-Anchor\" href=\"#消息传递方法计算\">#</a> 消息传递方法计算</h4>\n<ul>\n<li>\n<p>每个点的特征该如何更新？</p>\n<ul>\n<li>\n<p>考虑<strong>自身</strong>的特征与<strong>邻居</strong>的特征。</p>\n</li>\n<li>\n<p><img src=\"F:%5CTODOIT%5CGNN%5C3.png\" alt=\"3\"></p>\n</li>\n<li>\n<img src=\"F:\\TODOIT\\GNN\\5.png\" alt=\"5\" style=\"zoom: 150%;\" />\n<blockquote>\n<p>​\t\t\t\t\t自身特征：<strong>h/x</strong>\t可学习参数 (相连边的权值)：<strong>W</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>特征更新的方法有很多，可以根据任务自己设置</p>\n<ul>\n<li>\n<img src=\"F:\\TODOIT\\GNN\\4.png\" alt=\"3\" style=\"zoom:50%;\" />\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"多层gcn的作用\"><a class=\"markdownIt-Anchor\" href=\"#多层gcn的作用\">#</a> 多层 GCN 的作用</h4>\n<ul>\n<li>\n<p>GCN 可以有多层（本质即更新各部分的特征）</p>\n<p><img src=\"F:%5CTODOIT%5CGNN%5C6.png\" alt=\"6\"></p>\n</li>\n<li>\n<p>GNN 可以设置为多层结构时的<strong>输入</strong>和<strong>输出</strong>都是特征，邻接矩阵不会改变，但每个点上面的特征会发生改变。多层的 GNN 会包含更多的邻居，相当于此时的 **“感受野”**（<u>卷积神经网络名词，可理解为接触到的全局的信息范围）</u><strong>增大</strong>，当每个点具有全局的特征时，此时类似于 transformer 的形式。</p>\n</li>\n<li>\n<h5 id=\"输出特征的作用\"><a class=\"markdownIt-Anchor\" href=\"#输出特征的作用\">#</a> 输出特征的作用</h5>\n<ul>\n<li>各个点 / 边特征组合后可以进行图分类…</li>\n</ul>\n</li>\n<li>\n<h5 id=\"为什么要做多层gcn\"><a class=\"markdownIt-Anchor\" href=\"#为什么要做多层gcn\">#</a> 为什么要做多层 GCN？</h5>\n<ul>\n<li>可以使结点具有<strong>全局的特征</strong>，GCN 主要聚合邻结点的信息，对于任意一个结点，结点特征每迭代依次，就聚合了更高阶的邻结点的信息。随着 GCN 层数的增加，结点的聚合半径（最高邻居结点的阶数）也变大，一旦达到某个阈值，该结点覆盖全图结点。</li>\n<li><strong>但是</strong>，如果层数很多，每个结点覆盖的结点都会收敛到全图，这就导致每个结点的局部网络结构的多样性大大降低，对于结点自身特征的学习反而不好。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"gcn基本模型概述\"><a class=\"markdownIt-Anchor\" href=\"#gcn基本模型概述\">#</a> GCN 基本模型概述</h4>\n<ul>\n<li>适合做<strong>半监督任务</strong>，用某个结点的少量数据也能进行训练</li>\n</ul>\n<h4 id=\"图卷积的基本计算方法\"><a class=\"markdownIt-Anchor\" href=\"#图卷积的基本计算方法\">#</a> 图卷积的基本计算方法</h4>\n<ul>\n<li>\n<p>GCN 基本思想：</p>\n<p>​\t<strong>消息传递 / 聚合</strong>，即<u>平均其自身与邻居特征后传入神经网络</u>（下图橙色结点为例）。</p>\n<p><img src=\"F:%5CTODOIT%5CGNN%5C7.png\" alt=\"7\"></p>\n</li>\n<li>\n<p>网络层数：</p>\n<p>​    GCN 可以做多层，但一般浅做 2、3 层较合适 (6 个人认识全世界理论)，不会很多层</p>\n<p><img src=\"F:%5CTODOIT%5CGNN%5C8.png\" alt=\"8\"></p>\n<p>​                                                 <u>最后得到每个点的特征向量</u></p>\n</li>\n<li>\n<p>图中基本组成：</p>\n<ul>\n<li>\n<p><strong>G</strong>—— 图</p>\n</li>\n<li>\n<p><strong>A</strong>—— 邻接矩阵</p>\n</li>\n<li>\n<p><strong>D</strong>—— 各个结点</p>\n</li>\n<li>\n<p><strong>F</strong>—— 每个结点的特征</p>\n<p><img src=\"F:%5CTODOIT%5CGNN%5C9.png\" alt=\"9\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>特征计算方法：</p>\n<ul>\n<li><strong>矩阵乘法</strong></li>\n<li><img src=\"F:%5CTODOIT%5CGNN%5C10.png\" alt=\"10\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"邻接的矩阵的变换\"><a class=\"markdownIt-Anchor\" href=\"#邻接的矩阵的变换\">#</a> 邻接的矩阵的变换</h4>\n<ul>\n<li>考虑自身（将度矩阵考虑进去）</li>\n<li>左乘对<strong>行</strong>做<u>归一化</u>操作 + 右乘对<strong>列</strong>做<u>归一化</u>操作（归一化：简化计算的操作）</li>\n</ul>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t大致想法（下图）</p>\n<ul>\n<li><img src=\"F:%5CTODOIT%5CGNN%5C11.png\" alt=\"11\"></li>\n</ul>\n<h4 id=\"ugcn基本原理定义u\"><a class=\"markdownIt-Anchor\" href=\"#ugcn基本原理定义u\">#</a> <u>GCN 基本原理 / 定义</u></h4>\n<ul>\n<li>\n<p><img src=\"F:%5CTODOIT%5CGNN%5C12.png\" alt=\"12\"></p>\n<ul>\n<li><strong>ReLU</strong>，全称为：Rectified Linear Unit，是一种人工神经网络中常用的激活函数，通常意义下，其指代数学中的斜坡函数，即 <u>f ( x ) = max ⁡ ( 0 , x )</u><br>\n<img src=\"F:%5CTODOIT%5CGNN%5C13.png\" alt=\"13\"></li>\n</ul>\n</li>\n<li>\n<p>GCN 层数</p>\n<ul>\n<li>在多个图数据集中，都可以发现两三层比较合适，多反而差了。</li>\n<li><img src=\"F:%5CTODOIT%5CGNN%5C14.png\" alt=\"14\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"pytorch-geometric工具包安装与配置方法略\"><a class=\"markdownIt-Anchor\" href=\"#pytorch-geometric工具包安装与配置方法略\">#</a> PyTorch Geometric 工具包安装与配置方法（略）</h4>\n<ul>\n<li>\n<p><a href=\"https://www.bilibili.com/video/BV1j8411876K?p=12&amp;vd_source=d1abfb72c73986bf3b64ed4a087cdf09%EF%BC%88\">https://www.bilibili.com/video/BV1j8411876K?p=12&amp;vd_source=d1abfb72c73986bf3b64ed4a087cdf09（</a><u>Pytorch Gepmetric</u>）</p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/pointer_onlysoul/article/details/121354353?utm_medium=distribute.pc_relevant.none-task-blog-2\">https://blog.csdn.net/pointer_onlysoul/article/details/121354353?utm_medium=distribute.pc_relevant.none-task-blog-2</a><sub>default</sub>baidujs_baidulandingword~default-0-121354353-blog-109139329.235<sup>v35</sup>pc_relevant_default_base3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1</p>\n<p>（<u>Anaconda+PyTorch 安装（非英伟达显卡 + win10+Python3.8）</u>）</p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/C_chuxin/article/details/82690093\">https://blog.csdn.net/C_chuxin/article/details/82690093</a></p>\n<p>​\t\t\t\t(本<u>地 python 库与新装 Anaconda 库并存</u>)</p>\n</li>\n</ul>\n<h4 id=\"数据集与邻接矩阵格式karateclub空手道俱乐部案例\"><a class=\"markdownIt-Anchor\" href=\"#数据集与邻接矩阵格式karateclub空手道俱乐部案例\">#</a> 数据集与邻接矩阵格式（——KarateClub 空手道俱乐部案例）</h4>\n<ul>\n<li>\n<p>Graph Neural Networks</p>\n<ul>\n<li>\n<p>致力于解决<strong>不规则</strong>数据结构 (图像和文本相对格式都固定，但是社交网络与化学分子等格式肯定不是固定的)。</p>\n</li>\n<li>\n<p>GNN 模型<u>迭代更新</u>主要基于图中每个节点及其<strong>邻居</strong>的信息。</p>\n<p><img src=\"F:%5CTODOIT%5CGNN%5C15.png\" alt=\"15\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>数据集</strong>: <u><strong>Zachary’s karate club network</strong></u></p>\n<ul>\n<li>该图描述了一个空手道俱乐部会员的社交关系，以 34 名会员作为节点，如果两位会员在俱乐部之外仍保持社交关系，则在节点间增加一条边。每人节点具有一个 34 维的特征向量，一共有 78 条边。在收集数据的过程中，管理人员 John A 和教练 Mr.Hi 之间产生了冲突，会员们选择了站队，一半会员跟随 Mr.Hi 成立了新俱乐部，剩下一半会员找了新教练或退出了俱乐部。</li>\n</ul>\n</li>\n<li>\n<p>代码实现：</p>\n<ul>\n<li>\n<p>获取数据集，打印基础数据指标</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch_geometric.datasets <span class=\"keyword\">import</span> KarateClub</span><br><span class=\"line\"></span><br><span class=\"line\">dataset = KarateClub()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Dataset: <span class=\"subst\">&#123;dataset&#125;</span>:&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;======================&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Number of graphs: <span class=\"subst\">&#123;<span class=\"built_in\">len</span>(dataset)&#125;</span>&#x27;</span>)  <span class=\"comment\"># 图的数量—1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Number of features: <span class=\"subst\">&#123;dataset.num_features&#125;</span>&#x27;</span>) <span class=\"comment\"># 特征个数—34</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Number of classes: <span class=\"subst\">&#123;dataset.num_classes&#125;</span>&#x27;</span>)  <span class=\"comment\"># 数据种类—4</span></span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">    Dataset: KarateClub():</span><br><span class=\"line\">    ======================</span><br><span class=\"line\">    Number of graphs: <span class=\"number\">1</span></span><br><span class=\"line\">    Number of features: <span class=\"number\">34</span></span><br><span class=\"line\">    Number of classes: <span class=\"number\">4</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>PyTorch Geometric 中的每个图形都由单个 Data 对象表示，该对象包含描述其图形表示的所有信息。我们可以随时打印数据对象，以接收有关其属性及其形状的简短摘要：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = dataset[<span class=\"number\">0</span>]  <span class=\"comment\"># Get the first graph object.</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;=========================================================&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">    Data(x=[<span class=\"number\">34</span>, <span class=\"number\">34</span>], edge_index=[<span class=\"number\">2</span>, <span class=\"number\">156</span>], y=[<span class=\"number\">34</span>], train_mask=[<span class=\"number\">34</span>])</span><br><span class=\"line\">\t===========================================================</span><br><span class=\"line\">    </span><br><span class=\"line\">    该数据对象具有<span class=\"number\">4</span>个属性：</span><br><span class=\"line\">    （<span class=\"number\">1</span>）edge_index：<span class=\"string\">&quot;2+边的个数&quot;</span>，属性保存有关图连接性的信息，即每个边缘的源节点和目标节点。 </span><br><span class=\"line\">    （<span class=\"number\">2</span>）PyG进一步将节点特征称为x（为<span class=\"number\">34</span>个节点中的每个节点分配了一个<span class=\"number\">34</span>维特征向量），前面表示样本数量，后面表示特征维度。</span><br><span class=\"line\">    （<span class=\"number\">3</span>）节点标签称为y（每个节点被精确地分配为一个类别）。 </span><br><span class=\"line\">    （<span class=\"number\">4</span>）还有一个名为train_mask的附加属性，它描述了我们已经知道其社区归属的节点。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>详细检查 edge_index 的属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> IPython.display <span class=\"keyword\">import</span> Javascript  </span><br><span class=\"line\">display(Javascript(<span class=\"string\">&#x27;&#x27;&#x27;google.colab.output.setIframeHeight(0, true, &#123;maxHeight: 300&#125;)&#x27;&#x27;&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">edge_index = data.edge_index</span><br><span class=\"line\"><span class=\"built_in\">print</span>(edge_index.t())</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">    &lt;IPython.core.display.Javascript <span class=\"built_in\">object</span>&gt;</span><br><span class=\"line\">tensor([[ <span class=\"number\">0</span>,  <span class=\"number\">1</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">2</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">3</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">4</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">5</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">6</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">7</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">8</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">10</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">11</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">12</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">13</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">17</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">19</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">21</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">31</span>],</span><br><span class=\"line\">        ........</span><br><span class=\"line\">        [<span class=\"number\">33</span>,  <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>,  <span class=\"number\">9</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">13</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">14</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">18</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">19</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">22</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">23</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">26</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">27</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">28</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">29</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">30</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">31</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">32</span>]])</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>networkx 可视化展示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入使用的模块包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> IPython.core.display_functions <span class=\"keyword\">import</span> display</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_geometric.datasets <span class=\"keyword\">import</span> KarateClub</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_geometric.utils <span class=\"keyword\">import</span> to_networkx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义最后可视化的函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">visualize</span>(<span class=\"params\">h, color, epoch=<span class=\"literal\">None</span>, loss=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    plt.figure(figsize=(<span class=\"number\">7</span>, <span class=\"number\">7</span>))</span><br><span class=\"line\">    plt.xticks([])</span><br><span class=\"line\">    plt.yticks([])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> torch.is_tensor(h):</span><br><span class=\"line\">        h = h.detach().cpu().numpy()</span><br><span class=\"line\">        plt.scatter(h[:, <span class=\"number\">0</span>], h[:, <span class=\"number\">1</span>], s=<span class=\"number\">140</span>, c=color, cmap=<span class=\"string\">&quot;Set2&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> epoch <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> loss <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            plt.xlabel(<span class=\"string\">f&#x27;Epoch: <span class=\"subst\">&#123;epoch&#125;</span>, Loss: <span class=\"subst\">&#123;loss.item():<span class=\"number\">.4</span>f&#125;</span>&#x27;</span>, fontsize=<span class=\"number\">16</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        nx.draw_networkx(G, pos=nx.spring_layout(G, seed=<span class=\"number\">42</span>), with_labels=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                         node_color=color, cmap=<span class=\"string\">&quot;Set2&quot;</span>)</span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\">G = to_networkx(data, to_undirected=<span class=\"literal\">True</span>)\t<span class=\"comment\">#data上述步骤已给</span></span><br><span class=\"line\">visualize(G, color=data.y)</span><br></pre></td></tr></table></figure>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<u><strong>可视化</strong></u></p>\n</li>\n<li>\n<p><img src=\"F:%5CTODOIT%5CGNN%5C16.png\" alt=\"16\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"模型定义与训练方法\"><a class=\"markdownIt-Anchor\" href=\"#模型定义与训练方法\">#</a> 模型定义与训练方法</h4>\n<ul>\n<li>\n<p>模型定义</p>\n<ul>\n<li>\n<p>三层 GCN</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Linear</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_geometric.nn <span class=\"keyword\">import</span> GCNConv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GCN</span>(torch.nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(GCN, self).__init__()</span><br><span class=\"line\">        torch.manual_seed(<span class=\"number\">1234</span>)</span><br><span class=\"line\">        self.conv1 = GCNConv(dataset.num_features, <span class=\"number\">4</span>)</span><br><span class=\"line\">        self.conv2 = GCNConv(<span class=\"number\">4</span>, <span class=\"number\">4</span>)\t<span class=\"comment\"># 数字表示维度</span></span><br><span class=\"line\">        self.conv3 = GCNConv(<span class=\"number\">4</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">        self.classifier = Linear(<span class=\"number\">2</span>, dataset.num_classes)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x, edge_index</span>):       <span class=\"comment\"># edge_index 为邻接矩阵</span></span><br><span class=\"line\">        h = self.conv1(x, edge_index)</span><br><span class=\"line\">        h = h.tanh()    <span class=\"comment\"># 双曲正切函数</span></span><br><span class=\"line\">        h = self.conv2(h, edge_index)</span><br><span class=\"line\">        h = h.tanh()</span><br><span class=\"line\">        h = self.conv3(h, edge_index)</span><br><span class=\"line\">        h = h.tanh()  <span class=\"comment\"># Final GNN embedding space.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Apply a final (linear) classifier.    全连接</span></span><br><span class=\"line\">        out = self.classifier(h)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> out, h</span><br><span class=\"line\"></span><br><span class=\"line\">model = GCN()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(model)</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">    GCN(</span><br><span class=\"line\">  (conv1): GCNConv(<span class=\"number\">34</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">  (conv2): GCNConv(<span class=\"number\">4</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">  (conv3): GCNConv(<span class=\"number\">4</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">  (classifier): Linear(in_features=<span class=\"number\">2</span>, out_features=<span class=\"number\">4</span>, bias=<span class=\"literal\">True</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>输出特征展示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">_, h = model(data.x, data.edge_index)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Embedding shape: <span class=\"subst\">&#123;<span class=\"built_in\">list</span>(h.shape)&#125;</span>&#x27;</span>)</span><br><span class=\"line\">visualize(h, color=data.y)</span><br></pre></td></tr></table></figure>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<u><strong>可视化</strong></u></p>\n<p><img src=\"F:%5CTODOIT%5CGNN%5C17.png\" alt=\"17\"></p>\n</li>\n<li>\n<p><strong>训练模型</strong>（半监督，semi—supervised）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> IPython.display <span class=\"keyword\">import</span> Javascript  <span class=\"comment\"># Restrict height of output cell.</span></span><br><span class=\"line\"></span><br><span class=\"line\">display(Javascript(<span class=\"string\">&#x27;&#x27;&#x27;google.colab.output.setIframeHeight(0, true, &#123;maxHeight: 430&#125;)&#x27;&#x27;&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">criterion = torch.nn.CrossEntropyLoss()  <span class=\"comment\"># Define loss criterion.</span></span><br><span class=\"line\">optimizer = torch.optim.Adam(model.parameters(), lr=<span class=\"number\">0.01</span>)  <span class=\"comment\"># Define optimizer.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    optimizer.zero_grad()  <span class=\"comment\"># Clear gradients.</span></span><br><span class=\"line\">    out, h = model(data.x, data.edge_index)  <span class=\"comment\"># Perform a single forward pass.</span></span><br><span class=\"line\">    loss = criterion(out[data.train_mask],</span><br><span class=\"line\">                     data.y[data.train_mask])  <span class=\"comment\"># Compute the loss solely based on the training nodes.</span></span><br><span class=\"line\">    loss.backward()  <span class=\"comment\"># Derive gradients.</span></span><br><span class=\"line\">    optimizer.step()  <span class=\"comment\"># Update parameters based on gradients.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> loss, h</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">401</span>):</span><br><span class=\"line\">    loss, h = train(data)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> epoch % <span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        visualize(h, color=data.y, epoch=epoch, loss=loss)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.3</span>)</span><br></pre></td></tr></table></figure>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<strong><u>可视化</u></strong></p>\n<p><img src=\"F:%5CTODOIT%5CGNN%5C18.png\" alt=\"18\"></p>\n<p><img src=\"F:%5CTODOIT%5CGNN%5C19.png\" alt=\"19\"></p>\n</li>\n</ul>\n<h4 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h4>\n",
            "tags": [
                "GNN"
            ]
        }
    ]
}