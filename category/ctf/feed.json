{
    "version": "https://jsonfeed.org/version/1",
    "title": "Aer0Lite • All posts by \"ctf\" category",
    "description": "",
    "home_page_url": "http://Aer0Liteee.github.io",
    "items": [
        {
            "id": "http://aer0liteee.github.io/post/e73517db.html",
            "url": "http://aer0liteee.github.io/post/e73517db.html",
            "title": "SQL注入",
            "date_published": "2023-07-02T02:11:52.000Z",
            "content_html": "<h3 id=\"sql注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入\">#</a> SQL 注入</h3>\n<ul>\n<li>\n<p>概念：</p>\n<ul>\n<li>所谓的 sql 注入就是通过某种方式<strong>将恶意的 sql 代码添加到输入参数</strong>中，然后传递到 sql 服务器使其解析并执行的一种攻击手法。</li>\n</ul>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li>\n<p>假设有一个登录表单，应用程序使用提交的用户名和密码来构建 SQL 查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$username = $_POST[&#x27;username&#x27;];</span><br><span class=\"line\">$password = $_POST[&#x27;password&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">$sql = &quot;SELECT * FROM users WHERE username = &#x27;$username&#x27; AND password = &#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure>\n<p>如果应用程序没有对用户输入进行适当的处理和转义，攻击者可能会在用户名字段中输入恶意代码，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;--</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，构建的 SQL 查询将变成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE username = &#x27;&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;--&#x27; AND password = &#x27;$password&#x27;</span><br></pre></td></tr></table></figure>\n<p>这个查询的条件始终成立（‘1’=‘1’），绕过了密码验证，从而使攻击者能够成功登录或绕过应用程序的安全措施。</p>\n<p>为了防止 SQL 注入攻击，应用程序应该始终对用户输入进行验证、过滤和转义。最好的防御措施之一是使用参数化查询或预编译语句，它们可以防止恶意的 SQL 代码注入。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>基本步骤</p>\n<ul>\n<li>\n<p><strong>SQL 注入步骤</strong><br>\n（1）判断是否存在注入，注入是字符型还是数字型</p>\n<blockquote>\n<p>​\t\t首先 id 后面加单引号 查看是否可能存在 sql 注入，返回正常，不存在；返回不正常，存在</p>\n</blockquote>\n<p>（2）猜解 SQL 查询语句中的字段数<br>\n（3）判断哪些位置字段可以注入利用<br>\n（4）查询数据库（当前使用数据库或所有数据库）<br>\n（5）查询指定数据库中的表<br>\n（6）查询指定表中的字段名<br>\n（7）查询表中字段的值</p>\n</li>\n</ul>\n</li>\n<li>\n<p>常见方式：</p>\n<ul>\n<li>\n<p>可以将 SQL 注入分为两大类：<br>\n<strong>非盲注</strong>和<strong>盲注</strong>，<u>非盲注就是有报错回显</u>，<u>盲注就是没有报错回显</u></p>\n</li>\n<li>\n<p>常见的 SQL 注入方法有：</p>\n<ul>\n<li>\n<p><strong>联合注入</strong></p>\n<ul>\n<li>\n<p>原理<br>\n（1）<strong>union select</strong> 定义<br>\n将多个 SELECT 语句的结果合并到一个结果集中<br>\n（2）mysql 直观测试</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">复制代码<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>相关函数</p>\n<ul>\n<li>group_concat (参数 1，参数 2，参数 3 等等无数个参数) 语法： <strong>group_concat</strong> 函数<u>返回一个字符串结果</u>(就是返回一行)，该结果由括号中的各个参数值执行然后连接组合而成</li>\n<li>char ()：还原 ASCII 码为字符</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>布尔盲注</strong></p>\n<ul>\n<li>\n<p>原理<br>\n Web 的页面的<u>仅仅会返回 True 和 False</u>，那么布尔盲注就是根据页面返回的 True 或者是 False 来得到数据库中的相关信息</p>\n</li>\n<li>\n<p>相关函数解析</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">length：返回值为字符串的字节长度</span><br><span class=\"line\">ascii：把字符转换成ascii码值的函数</span><br><span class=\"line\">substr(str, pos, len)：在str中从pos开始的位置（起始位置为1），截取len个字符</span><br><span class=\"line\">count：统计表中记录的一个函数，返回匹配条件的行数</span><br><span class=\"line\">limit：</span><br><span class=\"line\">     limit m ：检索前m行数据，显示1-10行数据（m&gt;0）</span><br><span class=\"line\">     limit(x,y)：检索从x+1行开始的y行数据</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>时间盲注</strong></p>\n<ul>\n<li>\n<p>原理：</p>\n<ul>\n<li>时间盲注的一般思路是延迟注入，就是利用<strong> sleep ()<strong> 或</strong> benchmark ()<strong> 等函数让 mysql 执行时间变长并结合判断条件语句 if (expr1,expr2,expr3)，然后</strong>通过页面的响应时间长短</strong>来判断语句返回的值是 True 还是 False，从而猜解一些未知的字段</li>\n</ul>\n</li>\n<li>\n<p>相关函数：</p>\n<ul>\n<li>if (expr1,expr2,expr3)： expr1 的值为 TRUE，则返回值为 expr2 ；expr1 的值为 FALSE，则返回值为 expr3<br>\nsleep (n)：延迟响应时间 n 秒</li>\n</ul>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li>\n<p>假设有一个搜索功能，用户可以在网站上搜索电影标题。搜索功能的查询语句通过将用户提供的搜索关键字嵌入到 SQL 查询中来生成结果。例如，查询语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM movies WHERE title LIKE &#x27;%用户输入的关键字%&#x27;</span><br></pre></td></tr></table></figure>\n<p>这个查询语句会返回包含用户搜索关键字的电影标题。</p>\n<p>攻击者可以利用时间盲注来判断特定条件是否满足，例如是否存在一个特定的电影。</p>\n<p>假设攻击者要判断电影名称为 “The Matrix” 是否存在。攻击者可以通过向搜索字段输入恶意的搜索字符串来触发时间延迟，如果延迟时间较长，则可以推断条件为真，否则推断为假。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">搜索关键字：&#x27; OR IF(SUBSTRING((SELECT title FROM movies WHERE title = &#x27;The Matrix&#x27;),1,1)=&#x27;T&#x27;, SLEEP(5), 0) AND &#x27;1%&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>\n<p>在上述示例中，攻击者通过构造恶意的搜索字符串进行注入。该字符串使用  <code>IF</code>  函数和  <code>SLEEP</code>  函数来引起延迟，在查询执行期间等待 5 秒钟。如果条件  <code>SUBSTRING((SELECT title FROM movies WHERE title = 'The Matrix'),1,1)='T'</code>  为真，即判断电影名称的第一个字符是 ‘T’，则会发生延迟。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>宽字节注入</strong></p>\n<ul>\n<li>\n<p>原理：</p>\n<ul>\n<li>当存在宽字节注入的时候，注入参数里带入％df％27，即可把（％5c）吃掉，也就是 % df 和 %5c 结合成了汉字運</li>\n</ul>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$userid = $_GET[&#x27;id&#x27;];</span><br><span class=\"line\">$query = &quot;SELECT * FROM users WHERE id = &#x27;$userid&#x27;&quot;;</span><br></pre></td></tr></table></figure>\n<p>在正常情况下，如果用户提供的  <code>id</code>  参数是单字节编码，应用程序会将其包含在查询字符串中。然而，通过在  <code>id</code>  参数中使用宽字节编码，攻击者可以绕过过滤机制，将恶意注入的 SQL 代码作为有效数据执行。例如，假设攻击者提供的  <code>id</code>  参数是  <code>%bf' OR '1'='1</code> ，其中  <code>%bf</code>  是宽字节编码的  <code>'</code>  。</p>\n<p>在这种情况下，构建的 SQL 查询变成了：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE id = &#x27;�&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;</span><br></pre></td></tr></table></figure>\n<p>这将导致查询条件始终为真（‘1’=‘1’），从而绕过了应用程序的身份验证，可能导致数据泄露、修改或其他安全问题。</p>\n<p>为了防止宽字节注入攻击，应用程序应该正确处理和验证输入的数据，特别是字符编码方面。建议采用参数化查询或使用安全的编码和解码机制，以避免受到这种类型的注入攻击。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>报错注入</strong></p>\n<ul>\n<li>\n<p>原理：</p>\n<ul>\n<li>报错注入是通过特殊函数错误使用并使其输出错误结果来获取信息的。</li>\n</ul>\n</li>\n<li>\n<p>相关函数：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">·<span class=\"built_in\">concat</span>()函数：用于将多个字符串连接成一个字符串</span><br><span class=\"line\">·<span class=\"built_in\">floor</span>(x) 函数：返回小于 x 的最大整数值</span><br><span class=\"line\">·<span class=\"built_in\">rand</span>()函数调：用可以在<span class=\"number\">0</span>和<span class=\"number\">1</span>之间产生一个随机数</span><br><span class=\"line\">·group by语句：根据一个或多个列对结果集进行分组</span><br><span class=\"line\">·<span class=\"built_in\">updatexml</span>(目标xml文档，xml路径，更新的内容)：更新xml文档的函数，xpath_expr： 需要更新的xml路径(Xpath格式)</span><br><span class=\"line\">·new_xml： 更新后的内容</span><br><span class=\"line\">此函数用来更新选定XML片段的内容，将XML标记的给定片段的单个部分替换为 xml_target 新的XML片段 new_xml ，然后返回更改的XML。xml_target替换的部分 与xpath_expr 用户提供的XPath表达式匹配。</span><br><span class=\"line\"><span class=\"built_in\">extractvalue</span>(目标xml文档，xml路径)：对XML文档进行查询的函数，一个XML标记片段 xml_frag和一个XPath表达式 xpath_expr（也称</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li>\n<p>假设有一个登录页面，您需要输入用户名和密码进行身份验证。该应用程序使用以下查询语句进行验证：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE username = &#x27;输入的用户名&#x27; AND password = &#x27;输入的密码&#x27;</span><br></pre></td></tr></table></figure>\n<p>攻击者可以使用报错注入来利用应用程序中的错误消息来获取敏感信息，例如数据库的名称、表的名称等。</p>\n<p>以下是一个示例的报错注入攻击：</p>\n<p>假设攻击者要尝试通过报错注入来获取数据库的名称。攻击者在用户名字段中输入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27; OR 1=1 ORDER BY 1--</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，攻击者向用户名字段中注入了恶意代码，即  <code>' OR 1=1 ORDER BY 1--</code> 。这段代码仅仅是为了触发报错，而不是以正常的方式进行身份验证。</p>\n<p>当应用程序执行查询时，由于注入的代码的存在，查询将变成以下形式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE username = &#x27;&#x27; OR 1=1 ORDER BY 1--&#x27; AND password = &#x27;输入的密码&#x27;</span><br></pre></td></tr></table></figure>\n<p>上述查询中的  <code>ORDER BY 1</code>  是一种常见的错误引起的操作。如果查询执行成功，将不会发生错误，但如果查询失败，应用程序通常会显示错误消息或异常信息。</p>\n<p>通过观察错误消息或异常信息，攻击者可以推断出数据库的名称，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error: Unknown column &#x27;1&#x27; in &#x27;order clause&#x27;</span><br></pre></td></tr></table></figure>\n<p>从错误消息中，攻击者可以推断出数据库中存在一个名为  <code>1</code>  的列，这暗示了数据库中的一些结构信息。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>堆叠注入</strong></p>\n<ul>\n<li>\n<p>原理</p>\n<ul>\n<li>堆叠注入与受限于 select 语句的联合查询法相反，堆叠注入可用于执行任意 SQL 语句，<u>简单地说就是 MYSQL 的多语句查询</u></li>\n<li>堆叠注入的局限性：堆叠注入并不是在任何换环境下都可以执行的，可能受到 API 或者数据库引擎不支持的限制（如 Oracle 数据库），也有可能权限不足。web 系统中，因为代码通常只返回一个查询结果，因此堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。</li>\n</ul>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li>\n<p>假设我们有一个简单的登录表单，用于验证用户的用户名和密码。应用程序使用传递的用户名和密码构建 SQL 查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$username = $_POST[&#x27;username&#x27;];</span><br><span class=\"line\">$password = $_POST[&#x27;password&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">$sql = &quot;SELECT * FROM users WHERE username = &#x27;$username&#x27; AND password = &#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，应用程序没有正确地验证和过滤用户输入，存在 SQL 注入漏洞。</p>\n<p>下面是堆叠注入的示例攻击：</p>\n<p>假设攻击者在用户名字段中输入了以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin&#x27; OR 1=1; --</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，构建的 SQL 查询将变成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE username = &#x27;admin&#x27; OR 1=1; --&#x27; AND password = &#x27;$password&#x27;</span><br></pre></td></tr></table></figure>\n<p>这个查询中的  <code>OR 1=1; --</code>  部分是攻击者注入的恶意代码。它将使查询条件始终为真，因为  <code>1=1</code>  恒为真。 <code>--</code>  是 SQL 的注释标记，用于注释掉原始查询中的剩余部分。结果是，攻击者可以成功绕过身份验证，登录到系统中，即使他们提供了错误的密码。</p>\n<p><strong>堆叠注入的关键是在注入点中添加分号  <code>;</code>  来结束原始查询，然后添加额外的 SQL 语句来实现攻击者想要的恶意行为。这种技术可用于执行任意的 SQL 语句，如插入、更新或删除数据，甚至执行系统命令等。</strong></p>\n<p>要防止堆叠注入攻击，应用程序应该对所有用户输入进行正确的验证和转义，或者更好地使用参数化查询或预编译语句。这样可以防止注入的 SQL 代码被认为是有效的查询语句的一部分。确保在编写应用程序时实施严格的输入验证和过滤机制是至关重要的，以减少安全漏洞的出现</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>二次注入</strong></p>\n<ul>\n<li>\n<p>原理</p>\n<ul>\n<li>\n<p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到 SQL 查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中（比如虽然参数在过滤后会添加 &quot;“进行转义，但是”&quot; 并不会插入到数据库中），当<u>Web 程序调用存储在数据库中的恶意数据并执行 SQL 查询时，就发生了 SQL 二次注入</u>。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe7f5e853e9b4717949e71a1d10c229b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"在这里插入图片描述\"></p>\n<p>二次注入，可以概括为以下两步：</p>\n</li>\n<li>\n<p>第一步：插入恶意数据</p>\n<ul>\n<li>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</li>\n</ul>\n</li>\n<li>\n<p>第二步：引用恶意数据</p>\n<ul>\n<li>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li>\n<p>用户 A 在评论中输入以下内容：  <code>Nice post! Please check out my website at www.example.com'; DELETE FROM comments; --</code></p>\n<p>应用程序将评论内容存储在数据库中，但并不立即执行。当其他用户访问留言板页面时，应用程序从数据库中获取评论并将其显示在页面上。在获取评论的过程中，存在不当的代码执行，导致用户 A 注入的恶意代码被执行。</p>\n</li>\n<li>\n<p>在这个示例中，用户 A 在评论中注入了一个恶意代码，即  <code>'; DELETE FROM comments; --</code> 。这段代码旨在删除数据库中的评论表中的所有内容。由于应用程序在处理评论时存在漏洞，并没有正确地过滤或转义用户输入，导致注入的恶意代码被存储在数据库中。当其他用户访问留言板页面时，应用程序从数据库中检索评论并显示在页面上，但由于存在不当的代码执行，导致用户 A 注入的恶意代码被执行，从而删除了评论表中的所有内容。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>SQLMap 使用</p>\n<ul>\n<li>\n<p>常见参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">diff复制代码-u：指定含有参数的URL</span><br><span class=\"line\">--dbs：爆出数据库</span><br><span class=\"line\">--batch：默认选择执行</span><br><span class=\"line\">--random-agent：使用随机user-agent</span><br><span class=\"line\">-r：POST注入</span><br><span class=\"line\">--level：注入等级，一共有5个等级（1-5） 不加 level 时，默认是1，5级包含的payload最多，会自动破解出cookie、XFF等头部注入，相对应他的速度也比较慢</span><br><span class=\"line\">--timeout：设定重试超时</span><br><span class=\"line\">--cookie：设置cookie信息</span><br><span class=\"line\">--flush-session：删除指定目标缓存，重新对该目标进行测试</span><br><span class=\"line\">--tamper：使用waf绕过脚本</span><br><span class=\"line\">--time-sec：设定延时时间，默认是5秒</span><br><span class=\"line\">--thread：多线程，默认为1，最大为10</span><br><span class=\"line\">--keep-live： sqlmap默认是一次连接成功后马上关闭；HTTP报文中相当于Connection: Close（一次连接马上关闭）。要扫描站点的URL</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>对 url 进行检测，判断是否存在 SQL 注入</strong></p>\n<ul>\n<li>python <a href=\"http://sqlmap.py\">sqlmap.py</a> -u “url” --batch</li>\n</ul>\n</li>\n<li>\n<p><strong>获取数据库</strong></p>\n<ul>\n<li>python <a href=\"http://sqlmap.py\">sqlmap.py</a> -u URL --dbs --batch 获取全部数据库</li>\n<li>python <a href=\"http://sqlmap.py\">sqlmap.py</a> -u URL --current-db --batch 获取当前数据库</li>\n</ul>\n</li>\n<li>\n<p><a href=\"http://sqlmap.py\">sqlmap.py</a> -u “<a href=\"http://url/news?id=1\">http://url/news?id=1</a>”  --dump -C “column_name” -T “table_name” -D “db_name”</p>\n</li>\n<li>\n<p><strong>POST 注入</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap -u “http://url/news/” --data=&quot;id=2” --cookie=&quot;&quot; //加cookie</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>使用 sqlmap 自带的过 waf 脚本：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap.py -u “http://test.com/test.php?Id=1” --tamper[“脚本名称”]（如果脚本失效，可以自定义脚本）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Web"
            ]
        }
    ]
}