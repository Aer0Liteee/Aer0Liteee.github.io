<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://Aer0Liteee.github.io</id>
    <title>Aer0Lite • Posts by &#34;android&#34; category</title>
    <link href="http://Aer0Liteee.github.io" />
    <updated>2023-07-09T10:15:13.000Z</updated>
    <category term="GNN" />
    <category term="malware" />
    <category term="Web" />
    <entry>
        <id>http://aer0liteee.github.io/post/f862a75e.html</id>
        <title>Cyber-Code-Intelligence-for-malware-detection</title>
        <link rel="alternate" href="http://aer0liteee.github.io/post/f862a75e.html"/>
        <content type="html">&lt;h1 id=&#34;cyber-code-intelligence-for-malware-detection&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cyber-code-intelligence-for-malware-detection&#34;&gt;#&lt;/a&gt; Cyber Code Intelligence for malware detection&lt;/h1&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&#34;摘要&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#摘要&#34;&gt;#&lt;/a&gt; 摘要&lt;/h2&gt;
&lt;p&gt;​	不断演变的安卓恶意软件对移动用户构成了严重的安全威胁，基于机器学习 (ML) 的防御技术吸引了积极的研究。由于缺乏知识，许多&lt;strong&gt;零日家族的恶意软件&lt;/strong&gt;可能仍然没有被发现直到分类器获得专门的知识。&lt;u&gt;大多数现有的基于 ML 的方法将需要很长的时间来学习最新的恶意软件家族景观中的新恶意软件家族&lt;/u&gt;。现有的基于 ML 的 Android 恶意软件检测和分类方法很难应对恶意软件的快速演变，特别是在零日恶意软件家族的出现和单视图特征的有限代表性方面。&lt;/p&gt;
&lt;h2 id=&#34;目的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目的&#34;&gt;#&lt;/a&gt; 目的&lt;/h2&gt;
&lt;p&gt;​	在这篇文章中，我们开发了一个新的 **&lt;u&gt;多视图特征智能 (MFI)&lt;/u&gt;** 框架，&lt;u&gt;从已知的恶意软件家族中学习目标能力的表示，以识别具有相同能力的未知和不断变化的恶意软件&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;​	新框架执行逆向工程以提取多视图异质特征包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;语义字符串特征、&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API 调用图特征&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smali 操作码（&lt;strong&gt;&lt;u&gt;smali opcode&lt;/u&gt;&lt;/strong&gt;）顺序特征。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Smali Opcode&lt;/strong&gt; 是一种用于描述 Android Dalvik 虚拟机指令的语言。&lt;u&gt;Dalvik 虚拟机是 Android 操作系统上运行应用程序的基础&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;Smali Opcode &lt;u&gt;使用基于文本的语法来描述 Dalvik 字节码指令&lt;/u&gt;。&lt;u&gt;它是一种类汇编语言，用于编写和修改已编译的 Android 应用程序的字节码&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;每个 Dalvik 指令都由&lt;u&gt;一个操作码（opcode）和零个或多个操作数&lt;/u&gt;组成。操作码表示特定操作的类型，例如加载值到寄存器、进行算术运算或跳转等。操作数提供了指令所需的数据。&lt;/p&gt;
&lt;p&gt;Smali Opcode 在文本文件中按顺序列出指令，并使用特定的语法来定义操作码和操作数。示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;const/4 v0, 0x1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const/16 v1, 0x64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add-int v2, v0, v1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return v2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述示例中的代码片段演示了一些常见的 Smali Opcode。其中，指令  &lt;code&gt;const/4&lt;/code&gt;  将整数常量值（0x1）加载到寄存器  &lt;code&gt;v0&lt;/code&gt;  中，指令  &lt;code&gt;const/16&lt;/code&gt;  加载整数常量值（0x64）到寄存器  &lt;code&gt;v1&lt;/code&gt;  中，指令  &lt;code&gt;add-int&lt;/code&gt;  将寄存器  &lt;code&gt;v0&lt;/code&gt;  和  &lt;code&gt;v1&lt;/code&gt;  中的值相加，并将结果放入寄存器  &lt;code&gt;v2&lt;/code&gt;  中，最后的  &lt;code&gt;return&lt;/code&gt;  指令将结果从方法中返回。&lt;/p&gt;
&lt;p&gt;通过&lt;u&gt;使用 Smali Opcode，开发人员可以直接修改编译后的应用程序的字节码，以实现一些高级功能、优化性能或进行代码混淆等操作&lt;/u&gt;。然而，修改已编译的字节码需要对 Smali Opcode 语法和 Dalvik 指令集有一定的了解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	它可以通过一系列的&lt;u&gt;特征分析、选择、聚合和编码过程&lt;/u&gt;从已知的恶意软件家族中学习目标能力的表示，以检测具有共享目标能力的未知 Android 恶意软件。我们创建了一个新的数据集，其中有关于能力的真实信息。在新数据集上进行了许多实验，以评估新方法的性能和有效性。结果表明，在检测具有目标能力的未知 Android 恶意软件时，新方法优于三种最先进的方法，包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Drebin&lt;/li&gt;
&lt;li&gt;MaaDroid&lt;/li&gt;
&lt;li&gt;N-opcode&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;​	Android 在移动操作系统中占&lt;strong&gt;主导地位&lt;/strong&gt;，全球有&lt;u&gt;74.13%&lt;/u&gt;的手机运行安卓系统。根据 Statista 的报告，在 2019 年 12 月。仅在官方的 GooglePlay 应用商店中，就有近 300 万个 Android 应用软件。在 2020 年第一季度，尽管从 2018 年初 360 万的峰值下降，但仍有很多应用程序可用 。&lt;u&gt;安卓系统的普及为安卓恶意软件作者提供了激励&lt;/u&gt;，而&lt;u&gt;对安卓应用程序进行逆向工程的方法相对容易&lt;/u&gt;，导致安卓恶意软件的蓬勃发展。&lt;/p&gt;
&lt;p&gt;​	Android 恶意软件家族存在三个主要问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，在&lt;u&gt;建立安卓恶意软件家族方面没有统一的标准&lt;/u&gt;，因此大多数反病毒公司对家族的命名都不一样。这种临时性的方法为快速分享零日恶意软件的知识造成了障碍。ViruusTotal 通过应用多数投票策略，为特定的恶意软件样本确定一个单一家族的类别标签，从而缓解了命名不一致的问题。&lt;/li&gt;
&lt;li&gt;其次，安卓恶意软件家族的数量在 2018 年超过了 1000 个 ，并且不断激增，没有任何放缓的迹象。由于人类的错误和误判，安卓恶意软件家族的&lt;u&gt;爆炸性增长&lt;/u&gt;挑战了从人类专家到基于 ML 的检测器的知识转移。&lt;/li&gt;
&lt;li&gt;第三，&lt;u&gt;安卓恶意软件家族的分布是高度倾斜&lt;/u&gt;的，因为在大多数家族中只有少数几个样本可用。例如，在大约 58% 的 Android 恶意软件家族中，只有不到五个样本在 Drebin 数据集中。&lt;u&gt;安卓恶意软件的高度不平衡分布，对特征分析和模式识别的过程提出了挑战&lt;/u&gt;。因此，需要另一种替代性的分类方法来检测安卓零日恶意软件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;主要贡献&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主要贡献&#34;&gt;#&lt;/a&gt; 主要贡献&lt;/h3&gt;
&lt;p&gt;​		这篇文章的主要贡献有三方面。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;u&gt;对安卓恶意软件的恶意能力进行了深入的分析&lt;/u&gt;，并&lt;u&gt;创建了一个带有验证过的地面真实性分配的数据集&lt;/u&gt;，&lt;u&gt;用于检测具有针对性能力的不断发展的安卓恶意软件&lt;/u&gt;。（这个名为 &amp;quot;&lt;strong&gt;&lt;u&gt;CAPA&lt;/u&gt;&lt;/strong&gt;&amp;quot; 的新数据集将向公众发布为 Android 恶意软件的新研究提供启示。）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们提出了一种新的&lt;u&gt;多视图特征智能 (MFI)&lt;/u&gt; 方法。MFI 提取多视图异质特征 (源代码视图、API 图形调用视图和 smali 操作码视图。&lt;u&gt;MFI 将这些特征聚集成一个统一的表示，用于描述恶意的能力&lt;/u&gt;。此外，MFI 表示可以被送入一个神经模型，以识别具有目标能力的零日恶意软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们进行了大量的实验，从几个方面评估新的 MIFI 方法，包括&lt;u&gt;识别精度、处理零日系恶意软件的有效性、识别效果和可扩展性&lt;/u&gt;。MFI 胜过了三种最先进的方法，包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Drebin&lt;/li&gt;
&lt;li&gt;MaMaDroid&lt;/li&gt;
&lt;li&gt;N-opcode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在检测具有目标能力的未知安卓恶意软件时。这项工作的所有数据、代码和报告都将在 Github 上发布 (&lt;a href=&#34;https://github.com/JunTomyang/Android-Malware-Capability-Identification&#34;&gt;https://github.com/JunTomyang/Android-Malware-Capability-Identification&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;文章结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文章结构&#34;&gt;#&lt;/a&gt; 文章结构&lt;/h3&gt;
&lt;p&gt;​		本文的其余部分结构如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二节介绍了&lt;u&gt;Android 恶意软件检测和家族分类的相关工作&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;第三节&lt;u&gt;讨论我们提出的方法&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;第四节介绍了与&lt;u&gt;基线方法的比较实验和一些详细的分析&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;第五节给出&lt;strong&gt;结论&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#相关工作&#34;&gt;#&lt;/a&gt; 相关工作&lt;/h2&gt;
&lt;p&gt;​	表一比较和对比了我们的研究工作和最先进的工作，包括 DroidAPIMiner、Drebin 、DroidSIFT、HinDroid、MaMaDroid 和 ASTROID。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/64a980f11ddac507ccb84e3d.jpg&#34; alt=&#34;表一 &amp;amp;&amp;amp; 图一&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	我们专注于开发一种新的 MFI 方法，以识别具有目标能力的不断发展的 Android 恶意软件。这项工作的目的是&lt;u&gt;识别零日家族的新恶意软件样本&lt;/u&gt;。&lt;/p&gt;
&lt;h2 id=&#34;u网络代码情报的新方法u&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#u网络代码情报的新方法u&#34;&gt;#&lt;/a&gt; &lt;u&gt;网络代码情报的新方法&lt;/u&gt;&lt;/h2&gt;
&lt;p&gt;​		图 1 概述了我们提出的用于检测具有目标能力的恶意软件的 MFI。我们将恶意能力识别作为一个二元分类问题。一类是具有目标能力的恶意软件，而另一类则没有这种能力。给出原始 APK 样本，进行逆向工程以拆解二进制代码，然后提取多视图异质特征来重新发送恶意软件样本。将进行特征编码和聚合，以去除噪声和不相关的特征，并将多视图特征转换为向量，从而准确反映恶意软件恶意能力的内在特征。应用深度神经模型对输入的表示向量进行二元分类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/64a982641ddac507ccbb69bc.jpg&#34; alt=&#34;多视图特征智能 (MFI)框架流程图 &#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MFI 流程图&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收集特定能力的训练恶意软件&lt;/li&gt;
&lt;li&gt;静态分析的逆向工程&lt;/li&gt;
&lt;li&gt;从反汇编的代码中解析原始信息&lt;/li&gt;
&lt;li&gt;提取多视图异构特征&lt;/li&gt;
&lt;li&gt;异构特征预处理&lt;/li&gt;
&lt;li&gt;多视图特征融合&lt;/li&gt;
&lt;li&gt;训练深度神经网络进行能力识别&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;新数据和地面实况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新数据和地面实况&#34;&gt;#&lt;/a&gt; 新数据和地面实况&lt;/h3&gt;
&lt;p&gt;​	当把大量的安卓恶意软件与适当的安全 / 隐私相关能力联系起来时，MFI 的直接挑战之一就出现了。据我们所知，在现有的研究数据集中，&lt;u&gt;安全 / 隐私相关的能力没有明确的标签&lt;/u&gt;。由于缺乏定义明确的基础真相，现有的公开可用的安卓系统恶意软件数据集需要进一步的标记过程。因此，我们创建了一个&lt;strong&gt;带有能力注释的安卓恶意软件数据集&lt;/strong&gt;，我们将其称为 **&lt;u&gt;CAPA 数据集&lt;/u&gt;**。&lt;/p&gt;
&lt;p&gt;​	&lt;u&gt;CAPA 数据集是通过聚合两个著名的安卓恶意软件数据集 Drebin 和 AMD 得到的&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Drebin 数据集&lt;/strong&gt;包含 5560 个安卓恶意软件应用，来自于 2010 年 8 月至 2012 年 10 月期间收获了 179 个恶意软件家族。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AMD 数据集&lt;/strong&gt;包含 2010 年至 2016 年期间收集的 71 个不同恶意软件家族的 24 553 个 Android 恶意软件样本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AMD 数据集比 Drebin 数据集要新，被社区的研究人员广泛使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	CAPA 数据集由 2010 年至 2016 年七年间的 Android 恶意软件样本组成。随着 17 个家族在 Drebin 和 AMD 数据集之间的重复，&lt;u&gt;在最新版本的 CAPA 数据集中，总共包括 72 个家族或 7110 个应用程序。&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;​	为了验证我们提出的 MFI 的有效性，作为一个概念证明，我们选择了四种非常常见的能力作为案例研究，它们与四个主要的网络安全问题非常一致: &lt;strong&gt;远程控制、特权、货币化和隐私&lt;/strong&gt;。不出所料，&lt;u&gt;许多恶意样本拥有这四种能力中的一种或几种&lt;/u&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;僵尸网络攻击 (远程控制)&lt;/li&gt;
&lt;li&gt;未经授权的 root 访问 (权限)&lt;/li&gt;
&lt;li&gt;恶意短信收费 (货币化)&lt;/li&gt;
&lt;li&gt;窃取信息 (隐私)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;能力类别的完整列表见表二&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/64aa0fed1ddac507cc6cf914.png&#34; alt=&#34;与安全/隐私相关的能力列表&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;多视图异构结构特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多视图异构结构特征&#34;&gt;#&lt;/a&gt; 多视图异构结构特征&lt;/h3&gt;
&lt;p&gt;​	为了全面描述安卓恶意软件，以便更好地识别与安全隐私有关的能力，我们提取了三个异质特征的视图来代表安卓恶意软件样本。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源代码中的语义字符串特征:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	在这项工作中，从&lt;strong&gt; AndroidManifestxml&lt;/strong&gt; 文件中提取各种类型的语义信息以形成特征。 &lt;u&gt;AndroidManifestxm 文件驻留在所有 Android 应用包的根目录中，并向 Android 系统提供关于应用的基本信息&lt;/u&gt;。这四个基本信息来源包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用程序要求的权限&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用程序的软件组件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用程序要求的硬件组件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过滤的意图&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​    这四类信息可以被有效提取，以反映安卓应用的部分特征。具体来说，&lt;u&gt;安卓应用在访问包含敏感信息的资源之前，需要请求终端用户授予某些权限&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;第二个主要的信息来源是从字节码 classes.dex 文件中提取的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	对字节码进行反汇编，以检索语义信息，包括应用中使用的 API 调用和数据。四个基本信息源包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;受限的 API 调用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可疑的 API 调用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用的权限&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络地址&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​    这四种类型的信息提供了字节码的足迹。具体来说，&lt;u&gt;受限的 API 调用表明应用程序的敏感功能&lt;/u&gt;；&lt;u&gt;可疑的 API 调用暴露了 Android 恶意软件的安全 / 隐私相关行为&lt;/u&gt;；&lt;u&gt;权限信息共同反映了多个 API 调用的关系&lt;/u&gt;；&lt;u&gt;网络地址可能与已知的恶意网站或僵尸网络有关&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;​	为了从原始恶意软件中获得这些字符串特征，我们使用开源工具 Androguard ( &lt;a href=&#34;https://github.com/androguard/androguard&#34;&gt;https://github.com/androguard/androguard&lt;/a&gt;)。 Androguard 帮助我们从 classes.dex 文件中拆解字节码，并根据上述类别从 AndroidManifest.xml 文件中收集信息。提取的信息形成了语义特征，可以有效地在源代码层面上表示 Android 恶意软件。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Androguard&lt;/strong&gt; 是使用 Python 编写的逆向工具，它可以在多个平台上运行 Linux/Windows/OSX。使用它可以反编译 android 应用，也可以用来做 android app 的静态分析（static analysis）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://androapkinfo.py&#34;&gt;androapkinfo.py&lt;/a&gt;&lt;/strong&gt; 查看 apk 文件的包、资源、权限、组件、方法等信息&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./androapkinfo.py -i ./test.apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://androxml.py&#34;&gt;androxml.py&lt;/a&gt;&lt;/strong&gt; 解密 apk 包中的 AndroidManifest.xml 文件&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./androxml.py -i -i ./test.apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​    在这篇文章中，我们捕获了结构性 API 调用图，以减轻 Android 恶意软件数据集中的规避样本，下图 2 显示了提取 API 调用图特征的过程。&lt;u&gt;API 调用图被提取并嵌入到矢量表示中，旨在捕获恶意软件的行为&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/64aa18541ddac507cc7e292e.jpg&#34; alt=&#34;API调用图特征的过程&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提取 API 调用图&lt;/li&gt;
&lt;li&gt;抽象 API 到家庭颗粒度&lt;/li&gt;
&lt;li&gt;将 API 调用图嵌入到 向量中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;来自中间的 smali 代码的操作码顺序特征：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	作为字节码 classes.dex 文件的汇编器 / 反汇编器，&lt;u&gt;smali/baksmali 提供 smali 语言的人类可读代码&lt;/u&gt;， &lt;u&gt;smali 代码比 Dalvik 虚拟机用来执行 Android 应用程序的机器代码更容易解释&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;​	在本文中，根据 smali 编程规范，字节码 classes.dex 文件被拆解为一组 smali 代码。classes.dex 文件中的每个类都被翻译成一个单独的 smali 文件，每个 smali 文件都包含相应类中的多个方法。&lt;u&gt;每个 smali 条目由个操作码和多个操作数组成&lt;/u&gt;，其格式为人类可读的。&lt;/p&gt;
&lt;p&gt;​	&lt;u&gt;操作码被分为七个核心指令集以简化分类器的设计&lt;/u&gt;, 具体来说，这些指令集是&lt;strong&gt; Move,Return,Goto,If,Get,Put,Invoke&lt;/strong&gt;。操作码的分离有助于有效地区分相关的操作数，表三总结了指令集的七种类型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/64aa18e11ddac507cc7f7e56.png&#34; alt=&#34;指令集的七种类型&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	随后，获得一个 n-grams（n 元语法）表示，以代表安卓恶意软件。对于一个完整的表示，&lt;u&gt;通过遍历翻译后的 smali 文件来提取操作码序列，以保留 Android 恶意软件的信息，这种安排保证了在 smali 操作码级别的粒度&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;特征编码和聚合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#特征编码和聚合&#34;&gt;#&lt;/a&gt; 特征编码和聚合&lt;/h3&gt;
&lt;p&gt;​		在这项工作中，&lt;strong&gt;多视图的异构特征被预先处理，以形成最终的联合向量表示&lt;/strong&gt;。为了减少特征维度，去除不相关的特征，缓解下面深度神经网络的复杂性，对于源码中的语义字符串特征，我们根据不同的安全 / 隐私相关能力的特点选择关键的特征子集。例如，对于，恶意短信战能力，将选择&lt;u&gt;SEND SMS&lt;/u&gt;、&lt;u&gt;RECEIVE SMS&lt;/u&gt; 和&lt;u&gt;WRITE SMS&lt;/u&gt;相关的权限特征。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SMS&lt;/strong&gt; 是&lt;u&gt;Short Messaging Service（短消息服务）&lt;/u&gt;的缩写，是一种使用移动设备可以发送和接收文本信息的技术短信内容，以文本、数字或二进制非文本数据为主，目前，这种短消息的长度被限定在 140 字节之内。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	对于结构性 API 调用图的特点，如图 2 所示，以提高对 API 变化的弹性并实现可扩展性。因此，所有的 API 调用都被抽象为开发者定义的家族、混清的家族或九个安卓原生家族之一，包括:&lt;/p&gt;
&lt;p&gt;​	l) com.google 2) xml 3) apache 4)javax 5) java 6) android 7) dom 8) json 9) dalvik&lt;/p&gt;
&lt;p&gt;​	这些家族是 Android 操作系统的一部分，&lt;u&gt;它们提供了许多不同的 API，可以用于开发 Android 应用程序&lt;/u&gt;，这些 API 包括网络、数据库、图形、用户界面和其他功能。&lt;/p&gt;
&lt;p&gt;​	在所有视图的特征向量生成后，&lt;u&gt;我们将这些特征向量汇总，为每个恶意软件应用构建一个联合特征向量&lt;/u&gt;。因此，&lt;strong&gt;最终的特征向量有 149 个维度&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;通过神经模型进行能力识别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过神经模型进行能力识别&#34;&gt;#&lt;/a&gt; 通过神经模型进行能力识别&lt;/h3&gt;
&lt;p&gt;​	在这一步，安全 / 隐私相关的能力识别任务被执行，即识别具有信息窃取能力的 Android 恶意软件。最近的一个趋势显示，基于深度神经网络的解决方案在检测安卓恶意软件方面很受欢迎。&lt;u&gt;一旦用高质量的数据进行训练，深度神经网络可以有效地学习安卓恶意软件的复杂特征和行为&lt;/u&gt;。在这篇文章中，我们构建了一个深度神经网络架构来进行能力识别任务，同时&lt;strong&gt;通过对安卓恶意软件的紧凑表示来实现高的能力识别精度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	对于具体的能力，网络结构在层数和神经元的数量上有微小的变化。&lt;strong&gt;优化器&lt;/strong&gt;从&lt;u&gt;&amp;quot;SGD”、&amp;quot;Adadelta”、&amp;quot;RMSprop 和&amp;quot;Adamax&amp;quot;&lt;/u&gt;中选择。而&lt;strong&gt;损失函数&lt;/strong&gt;的选择是 “&lt;u&gt;binary crossentropy&lt;/u&gt;”。&lt;strong&gt;过度拟合是深度神经网络的主要问题之一&lt;/strong&gt;，在这项工作中，&lt;strong&gt;为了缓解过拟合的问题，我们应用了 dropout 正则化技术&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	在我们的深度神经网络的训练阶段，验证集是用训练集的 20% 形成的，以监测训练集和验证集的准确性趋势。&lt;strong&gt;验证集表明模型的训练是否正确，是否有过度拟合&lt;/strong&gt;。如果训练集和验证集的精度增长明显不同，那么学习过程将被终止，并在重新开始训练过程之前修改建模参数以避免过拟合问题。&lt;/p&gt;
&lt;h2 id=&#34;对mfi的性能评估&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对mfi的性能评估&#34;&gt;#&lt;/a&gt; 对 MFI 的性能评估&lt;/h2&gt;
&lt;h3 id=&#34;实验环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实验环境&#34;&gt;#&lt;/a&gt; 实验环境&lt;/h3&gt;
&lt;p&gt;​	为了验证我们提出的 MFI 的有效性，作为概念验证，本文选择了&lt;strong&gt;四&lt;/strong&gt;种常见的、具有代表性的安全 / 隐私相关功能（&lt;strong&gt;僵户网络政击、未经授权的根访问、恶意短信收费和信息窃取&lt;/strong&gt;）作为案例研究来进行实验。为了模拟零日恶意软件家族的识别，&lt;u&gt;训练数据只包括恶意软件家族的一个子集&lt;/u&gt;，而&lt;u&gt;测试集包含在训练过程中未见过的恶意软件家族&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/64aa2d9a1ddac507cca69446.jpg&#34; alt=&#34;数据集信息&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	表四中列出了用于&lt;u&gt;零日家族恶意软件能力识别的数据集的信息&lt;/u&gt;。在训练深度神经网络时，&lt;strong&gt;20% 的训练集被随机分割为验证集&lt;/strong&gt;，&lt;strong&gt;深度神经网络是用 Keras 库、Scikit-learn 和 Tensorflow 实现的&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;mfi与最先进的方法的比较&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfi与最先进的方法的比较&#34;&gt;#&lt;/a&gt; MFI 与最先进的方法的比较&lt;/h3&gt;
&lt;p&gt;​	现有的工作没有解决李日家族恶意软件的安全隐私相关能力识别问题。我们选择了三个&lt;strong&gt;能够进行恶意软件家族分类的基线模型&lt;/strong&gt;，包括（前文提到）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Drebin&lt;/strong&gt; 是第一个用线耳支持向量机分类器进行家庭分类任务的基线方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MaMaDroid&lt;/strong&gt; 是第二种基线方法，采用恶意软件家族模式和随机森林分类器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N-opcode&lt;/strong&gt; 是第三种基线方法，N=4，采用随机森林算法。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基线方法&lt;/strong&gt;是指在机器学习中，&lt;u&gt;使用一些简单的模型作为基准，然后使用更复杂的模型来比较性能&lt;/u&gt;。这些简单的模型被称为基线模型，它们可以是随机分类器、最常见类别分类器、简单线性回归和常数预测等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下图表五列出了我们提出的 MFI 和基线方法之间的性能比较&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/64aa2f831ddac507cca9bb9c.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	在表五中，不难发现，&lt;strong&gt;MFI 在识别安全 / 隐私相关能力方面均优于基线方法&lt;/strong&gt;。MFI 的成功归功于三个因素 - 多视图异构特征：&lt;u&gt;&lt;strong&gt;基于领域知识的特征选择&lt;/strong&gt;&lt;/u&gt;和&lt;u&gt;&lt;strong&gt;API 调用抽象&lt;/strong&gt;&lt;/u&gt;，以及&lt;u&gt;&lt;strong&gt;微调的深度神经网络架构&lt;/strong&gt;&lt;/u&gt;。&lt;/p&gt;
&lt;h3 id=&#34;对能力依赖的理解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对能力依赖的理解&#34;&gt;#&lt;/a&gt; 对能力依赖的理解&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;选择适当的特征来反映特定能力的内在特征&lt;/strong&gt;，对于准确捕捉不同安全 / 隐私相关能力的模式至关重要。因此，我们进一步确认并确保权限包龄和 API 调用的功能与 Android 开发者文档中的描述一致&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;僵尸网络&lt;/strong&gt;攻击能力的特征是根据以下三个标准来选择的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准 1：与网络或 WiFiManger 有关的权限和 API 调用功能。&lt;/li&gt;
&lt;li&gt;标准 2：与 PushService 或 HttpConnection 相关的服务或 API 调用功能。&lt;/li&gt;
&lt;li&gt;标准 3：一些不受信任的网络地域如 URL 功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;僵尸网络遭网络功击能力的特征数量为 100&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;具有未经授权的 root 访问能力的恶意软件将削弱安卓设备的安全性并获得特权访问&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;恶意软件在获得 root 权限后可以做的事情将没有限制。像 &lt;u&gt;REBOOT&lt;/u&gt;、&lt;u&gt;ACCESS _SUPERUSER&lt;/u&gt;或&lt;u&gt;exec()&lt;/u&gt;等功能将被识别。&lt;/li&gt;
&lt;li&gt;如果满足以下标准之一，那么该功能将被选择为未经授权的 root 访问能力。
&lt;ul&gt;
&lt;li&gt;标准 1：与&lt;strong&gt; System/bin/su&lt;/strong&gt; 有关的 API 调用特征或 &lt;strong&gt;Ljava/Lang/Runime—&amp;gt;exec&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;标准 2：PackageManager 相关的权限或 API 调用功能，包括在安装软件包、卸载 软件包、更新软件包、删除软件包和重言软件包等方面&lt;/li&gt;
&lt;li&gt;标准 3： 与 &lt;strong&gt;Bool_Compleled&lt;/strong&gt; 或&lt;strong&gt; update_device_state&lt;/strong&gt; 有关的服务和 BroadCast Receiver 特性。&lt;/li&gt;
&lt;li&gt;标准 4：与&lt;strong&gt; Receive_Boot_Compleled&lt;/strong&gt; 相关的意图和行动特征。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;未经授权的 root 访问能力的特征数量为 160&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;恶意软件&lt;/strong&gt;拥有恶意短信收费能力，可&lt;u&gt;在用户不知情的情况下在后台向高级服务发送短信&lt;/u&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所选择的与短信有关的功能包括
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WRITE SMS 、SEND SMS 、sendTextmessage()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;详细的功能选择标准如下。
&lt;ul&gt;
&lt;li&gt;标准 1：Sms Manager 相关的权限和 API 调用功能，包括&lt;u&gt;send_sms&lt;/u&gt;、&lt;u&gt;receive_sms&lt;/u&gt;和&lt;u&gt;write_sms&lt;/u&gt;。&lt;/li&gt;
&lt;li&gt;标准 2：行动和服务功能，包括&lt;u&gt;Data_Sms_Received&lt;/u&gt; 和 &lt;u&gt;Smssenderservice&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;标准 3：BroadCastReceiver 的相关功能，包括&lt;u&gt;SmsReceived&lt;/u&gt;和&lt;u&gt;MessageReceived&lt;/u&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;恶意短信收费能力的特征数量为 80 个&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;信息窃取&lt;/strong&gt;功能将收集用户的感性和隐私信息如联系人名单、位置或设备 ID，然后将其发送到远程服务器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以下 5 条标准适用于信息窃取能力的过滤特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标准 1：涉及&lt;u&gt;敏感位置信息&lt;/u&gt;的特征 ，包括&lt;strong&gt; access_coarse_location,&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;access_fifine_location 和 locationmanager&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准 2：&lt;u&gt;私人信息&lt;/u&gt;相关的功能，包括&lt;strong&gt; read_contacts,read_logs, read_history_bookmarks 和 read_phone_state&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准 3：&lt;u&gt;不受信任的网络地址 URL&lt;/u&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准 4：SmsManager 相关权限和 API 调用功能，包括&lt;strong&gt; send_sms、receive_sms 和 write_sms&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准 5：行动和服务特征，包括&lt;strong&gt; Data_Sms_Received 和 SmsSenderService.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;信息窃取能力的特征数量为 60。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	为了研究能力相关特征选择的有效性，以&lt;u&gt;恶意短信收费能力&lt;/u&gt;为例，我们使用 t 分布式随机邻居嵌入 (t-SNE) 算法展示了测试恶意软件的可视化。t-SNE 是一种降维的方法，特别适合数据集的可视化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/64aa394d1ddac507ccbda536.jpg&#34; alt=&#34;图3&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	图 3 (a) 是使用完整特征集的恶意软件的可视化结果，而图 3 (b) 显示的是基于选定的能力相关特征的结果。&lt;strong&gt;红点表示拥有恶意短信收费能力的恶意软件，而绿点表示没有恶意短信收费能力的恶意软件样本&lt;/strong&gt;。因此，所选择的特征是有辨别力的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/64aa39ac1ddac507ccbe470b.jpg&#34; alt=&#34;图4&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Baseline&lt;/strong&gt; 是使用完整特征集的结果  &lt;strong&gt;CDFS&lt;/strong&gt; 是指使用所选的依赖能力的特征子集的性能&lt;/p&gt;
&lt;p&gt;​	因为使用与能力相关的特征有明显的可视化结果。我们还在图 4 中展示了使用全部特征集或选定的能力相关特征的直接性能 (&lt;strong&gt;准确度得分和 F1 得分&lt;/strong&gt;) 的比较。因此，&lt;u&gt;使用选定的特征集会有很大的改进&lt;/u&gt;。&lt;/p&gt;
&lt;h3 id=&#34;单视图与多视图功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单视图与多视图功能&#34;&gt;#&lt;/a&gt; 单视图与多视图功能&lt;/h3&gt;
&lt;p&gt;​	本实验验证了多视图功能是否比单视图功能提供更好的性能，同时确定了零日家庭的安全 / 隐私相关能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic.imgdb.cn/item/64aa3bb61ddac507ccc1eea1.jpg&#34; alt=&#34;表6&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	实验结果列于表六。&lt;strong&gt;多视图特征的结果优于单视图特征&lt;/strong&gt;，在准确率得分和 F1 得分方面分别有大约 1%-4% 和 2%-4% 的提高。&lt;/p&gt;
&lt;p&gt;​	在这项工作中，深度神经网络被设计用来识别恶意软件的安全 / 隐私相关能力。我们研究了识别遭广网各政击能力的深度神经网络的训练和验证损失。&lt;u&gt;训练后的深度神经网络在 300 个 epochs 内迅速收敛&lt;/u&gt;。多视图异构特征的直接融合在识别安全 / 隐私相关能力方面的辨别力不够，然而&lt;u&gt;通过使用深度神经网络，可以学习到紧凑的、有鉴别力的表述&lt;/u&gt;。这些结果表明，所创建的深度神经网络在聚合多视图异构特征方面是强大的。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;​	在这篇文章中，提出了一个新的问题来识别&lt;strong&gt;零日安卓恶意软件&lt;/strong&gt;。为了解决所提出的研究问题，我们设计了一种新的轻量级方法&lt;strong&gt; MFI&lt;/strong&gt; 来&lt;u&gt;自动识别新检测到的 Android 恶意软件的能力&lt;/u&gt;。为了充分捕捉恶意软件的能力特征 MFI，我们&lt;u&gt;&lt;strong&gt;使用多视图异构特征来表示每个恶意软件&lt;/strong&gt;，包括来自源代码的语义字符串特征、结构性 API 调用图特征和 smali 操作码序列特征。&lt;/u&gt;我们还设计了一个基于源代码视图的能力相关特征视图。对于每个给定的能力，一个单一的深度神经网络将被训练，以确定测试的恶意软件是否具有特定能力。&lt;/p&gt;
&lt;p&gt;​	在这项工作中，深度神经网络被设计用来识别恶意软件的安全 / 隐私相关能力。多视角异质特征的直接融合在识别安全隐私相关能力方面的区分度不够。&lt;strong&gt;通过使用深度神经网络，可以学习到紧凑的、有辨别力的表征。这些结果表明，创建的深度神经网络在聚合多视角异质特征方面是强大的。&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="malware" />
        <updated>2023-07-09T10:15:13.000Z</updated>
    </entry>
</feed>
