{
    "version": "https://jsonfeed.org/version/1",
    "title": "Aer0Lite",
    "description": "",
    "home_page_url": "http://Aer0Liteee.github.io",
    "items": [
        {
            "id": "http://aer0liteee.github.io/post/bdbefb72.html",
            "url": "http://aer0liteee.github.io/post/bdbefb72.html",
            "title": "MML",
            "date_published": "2023-07-16T14:44:07.000Z",
            "content_html": "<h1 id=\"多模态学习multimodal-learning\"><a class=\"markdownIt-Anchor\" href=\"#多模态学习multimodal-learning\">#</a> 多模态学习 (MultiModal Learning)</h1>\n<h2 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h2>\n<p><strong><u>多模态机器学习</u></strong>，英文全称 MultiModal Machine Learning (MMML)</p>\n<h3 id=\"模态\"><a class=\"markdownIt-Anchor\" href=\"#模态\">#</a> 模态</h3>\n<p>​\t\t<strong>模态</strong>，是指一些表达或感知事物的方式，每一种<u>信息的来源或者形式</u>，都可以称为一种模态。例如，人有触觉，听觉，视觉，嗅觉；信息的媒介，有语音、视频、文字等；多种多样的传感器，如雷达、红外、加速度计等，以上的每一种都可以称为一种模态。</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051318189.png\" alt=\"What is Mulimodel\"></p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t<strong><u>感知模态</u></strong></p>\n<ul>\n<li>​\t\t我们生活在一个由多种模态（Multimodal）信息构成的世界，包括<strong>视觉信息、听觉信息、文本信息、嗅觉信息</strong>等等，当研究的问题或者数据集包含多种这样的模态信息时我们称之为多模态问题，研究多模态问题是推动人工智能更好的了解和认知我们周围世界的关键。</li>\n</ul>\n<blockquote>\n<p>相较于图像、语音、文本等多媒体 (Multi-media) 数据划分形式，“模态” 是一个更为细粒度的概念，<strong>同一媒介下可存在不同的模态</strong>。</p>\n<p>比如我们可以把<u>两种不同的语言当做是两种模态</u>，甚至在<u>两种不同情况下采集到的数据集</u>，亦可认为是两种模态。</p>\n</blockquote>\n<h3 id=\"多模态\"><a class=\"markdownIt-Anchor\" href=\"#多模态\">#</a> 多模态</h3>\n<p>​\t\t<strong>多模态</strong>，即是从多个模态表达或感知事物。 多模态可归类为<u>同质性的模态</u>，例如从两台相机中分别拍摄的图片；<u>异质性的模态</u>，例如图片与文本语言的关系。</p>\n<p>​\t<strong>多模态可能有以下三种形式：</strong></p>\n<ul>\n<li>\n<p><strong>来自不同传感器的同一类媒体数据</strong>。如物联网背景下<u>不同传感器所检测到的同一对象数据</u>等。</p>\n</li>\n<li>\n<p><strong>具有不同的数据结构特点、表示形式的表意符号与信息</strong>。如描述同一对象的结构化、非结构化的数据单元；描述<u>同一数学概念的公式、逻辑符号、函数图及解释性文本</u>等。</p>\n</li>\n<li>\n<p><strong>描述同一对象的多媒体数据</strong>。如互联网环境下描述某一特定对象的<u>视频、图片、语音、文本</u>等信息。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t下图即为典型的多模态信息形式</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211050816652.png\" alt=\"“下雪”场景的多模态数据(图像、音频与文本)\"></p>\n<p>通常主要研究模态包括 &quot;<strong>3V</strong>&quot;：即<strong> Verbal (文本)、Vocal (语音)、Visual (视觉)</strong>。</p>\n<p>​\t人跟人交流时的多模态：</p>\n<ul>\n<li>视觉\n<ul>\n<li>手势：头、眼、手</li>\n<li>肢体语言：体态、空间距离关系</li>\n<li>眼神交流：头、眼</li>\n<li>面部表情：笑容、皱眉……</li>\n</ul>\n</li>\n<li>语言\n<ul>\n<li>韵律：语调、语音质量</li>\n<li>声音：哭、笑……</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051318784.png\" alt=\"multimodal communicative behaviors\"></p>\n<h3 id=\"多模态机器学习\"><a class=\"markdownIt-Anchor\" href=\"#多模态机器学习\">#</a> 多模态机器学习</h3>\n<p>​\t<strong>多模态机器学习</strong>是从多种模态的数据中学习并且提升自身的算法，它不是某一个具体的算法，它是一类算法的总称。</p>\n<p>从<strong>语义感知</strong>的角度切入，多模态数据涉及<strong>不同的感知通道</strong>如视觉、听觉、触觉、嗅觉所接收到的信息；在<strong>数据层面</strong>理解，多模态数据则可被看作<strong>多种数据类型</strong>的组合，如图片、数值、文本、符号、音频、时间序列，或者集合、树、图等不同数据结构所组成的复合数据形式，乃至来自不同数据库、不同知识库的各种信息资源的组合。<strong>对多源异构数据的挖掘分析可被理解为多模态学习</strong>。</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051125254.png\" alt=\"多模态学习举例\"></p>\n<p>​\t   将同个对象（同一种数据）的不同输出形式进行多模态学习融合后进行预测</p>\n</li>\n</ul>\n<h2 id=\"发展历史\"><a class=\"markdownIt-Anchor\" href=\"#发展历史\">#</a> 发展历史</h2>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051008371.png\" alt=\"多模态发展的四个时期\"></p>\n<h3 id=\"行为时代\"><a class=\"markdownIt-Anchor\" href=\"#行为时代\">#</a> 行为时代</h3>\n<p>从心理学的角度对多模态这一现象进行剖析。</p>\n<h3 id=\"计算时代\"><a class=\"markdownIt-Anchor\" href=\"#计算时代\">#</a> 计算时代</h3>\n<p>利用一些浅层的模型对多模态问题进行研究，其中代表性的应用包括视觉语音联合识别，多模态情感计算等等。</p>\n<h3 id=\"交互时代\"><a class=\"markdownIt-Anchor\" href=\"#交互时代\">#</a> 交互时代</h3>\n<p>从交互的角度入手，研究多模态识别问题，拟人类多模态交互过程，其中主要的代表作品包括苹果的语音助手 Siri、IDIAP 实验室（瑞士人工智能研究机构）的 AMI 项目（记录会议录音、同步音频视频、转录与注释）等。</p>\n<h3 id=\"深度学习时代\"><a class=\"markdownIt-Anchor\" href=\"#深度学习时代\">#</a> 深度学习时代</h3>\n<p>多模态研究发展迅猛，得益于新的大规模多模态数据集、GPU 快速计算、强大的视觉特征抽取能力、强大的语言特征抽取能力。</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211050837453.png\" alt=\"多模态机器学习在Google Trends上的表现\"></p>\n<h2 id=\"典型任务\"><a class=\"markdownIt-Anchor\" href=\"#典型任务\">#</a> 典型任务</h2>\n<h3 id=\"language-audio\"><a class=\"markdownIt-Anchor\" href=\"#language-audio\">#</a> Language-Audio</h3>\n<ul>\n<li>Text-to-Speech Synthesis: 给定文本，生成一段对应的声音。</li>\n<li>Audio Captioning：给定一段语音，生成一句话总结并描述主要内容。(不是语音识别)</li>\n</ul>\n<h3 id=\"vision-audio\"><a class=\"markdownIt-Anchor\" href=\"#vision-audio\">#</a> Vision-Audio</h3>\n<ul>\n<li>\n<p>Speech-conditioned Face generation：给定一段话，生成说话人的视频。</p>\n</li>\n<li>\n<p>Audio-Driven 3D Facial Animation：<u>给定一段话与 3D 人脸模版，生成说话的人脸 3D 动画。</u></p>\n<ul>\n<li>\n<p>​\t\t\t\tApple Vision Pro 头显 + Otter AI 助手：打造全新空间计算体验</p>\n<p><img src=\"https://www.apple.com/v/apple-vision-pro/a/images/overview/hero/portrait_base__bwsgtdddcl7m_large.jpg\" alt=\"Person wearing Vision Pro, with eyes visible through front glass\"></p>\n<p>​\t苹果在 2023 年的全球开发者大会上发布了一款令人惊艳的产品：Vision Pro。</p>\n<p>​\t\t\t超高清的显示屏、先进的空间音频系统、无需手柄的手眼语音交互。</p>\n<p>Otter 是一个基于深度学习的多模态 AI 助手，它可以通过 Vision Pro 头显的摄像头捕捉用户的视觉输入，分析用户的环境、情境和意图，生成相应的反馈和指导。Otter 可以理解用户的语言、手势和眼神，与用户进行自然和流畅的对话，帮助用户完成各种任务和活动。</p>\n<p><img src=\"E:%5C%E6%A1%8C%E9%9D%A2%5CGZ%5C%E5%A4%A7%E4%BA%8C%E4%B8%8B%5C8e6b2a5ce8574900a91d6693d9e5ccc5.gif\" alt=\"img\"></p>\n<p>捕获用户视觉、语音输入特征，根据已采集的人脸面部信息生成说话的人脸 3D 动画</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vision-language\"><a class=\"markdownIt-Anchor\" href=\"#vision-language\">#</a> Vision-Language</h3>\n<ul>\n<li>Image/Video Captioning (图像 / 视频描述)：给定一个图像 / 视频，生成文本描述其主要内容。</li>\n<li>Vision-and-Language Navigation (视觉 - 语言导航)： 给定自然语言进行指导，使得智能体根据视觉传感器导航到特定的目标。</li>\n</ul>\n<h3 id=\"定位相关任务\"><a class=\"markdownIt-Anchor\" href=\"#定位相关任务\">#</a> 定位相关任务</h3>\n<ul>\n<li>Object Tracking from Natural Language Query: 给定一段视频和一些文本，追踪视频中文本所描述的对象。</li>\n</ul>\n<h3 id=\"更多模态\"><a class=\"markdownIt-Anchor\" href=\"#更多模态\">#</a> 更多模态</h3>\n<ul>\n<li>Affect Computing (情感计算)：使用语音、视觉 (人脸表情)、文本信息、心电、脑电等模态进行情感识别。</li>\n</ul>\n<h2 id=\"核心技术挑战\"><a class=\"markdownIt-Anchor\" href=\"#核心技术挑战\">#</a> 核心技术挑战</h2>\n<p>​                                                 <u>表征</u> <u>翻译</u> <u>对齐</u> <u>融合</u> <u>协同学习</u></p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051339734.png\" alt=\"多模态学习的技术挑战\"></p>\n<h3 id=\"表征representation\"><a class=\"markdownIt-Anchor\" href=\"#表征representation\">#</a> 表征 Representation</h3>\n<p>​\t第一个基本挑战是学习如何<strong>利用多种模态的互补性和冗余性的方式表示和总结多模态数据</strong>（<u>个人理解，即如何表示数据让计算机看得懂、能处理</u>）。多模态数据的异质性使得构建这样的表示具有挑战性，例如，语言通常是象征性的，而音频和视觉形式将被表示为信号。</p>\n<blockquote>\n<p>​\t<strong>单模态的表征负责将信息表示为计算机可以处理的数值向量或者进一步抽象为更高层的特征向量。</strong></p>\n<p>​\t<strong>多模态表征是指通过利用多模态之间的互补性，剔除模态间的冗余性，从而学习到更好的特征表示。</strong></p>\n</blockquote>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051431550.png\" alt=\"Representation\"></p>\n<h4 id=\"联合表征\"><a class=\"markdownIt-Anchor\" href=\"#联合表征\">#</a> 联合表征</h4>\n<p>​\t<strong>联合表征</strong>（Joint Representation）<u>将多个模态的信息一起映射到一个统一的多模态向量空间</u>，Joint 结构注重捕捉多模态的<strong>互补性</strong>，融合多个输入模态 x1 , x2 获得多模态表征 Xm = f (x1 ,…,xn)，进而利用 Xm 完成某种预测任务。</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211052136742.png\" alt=\"Joint Representation\"></p>\n<p>​\tMultimodal learning with deep boltzmann machines (NIPS 2012) 提出将 deep boltzmann machines（DBM） 结构扩充到多模态领域，通过 Multimodal DBM，可以学习到多模态的<strong>联合概率分布</strong>。</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051458819.png\" alt=\"Multimodal DBM 模型\"></p>\n<p>​\t在获得图像与文本间的<strong>联合概率分布</strong>后，在应用阶段：</p>\n<ul>\n<li>输入图片，<u>利用条件概率 P (文本 | 图片)，生成文本特征</u>，可以得到图片相应的文本描述；</li>\n<li>输入文本，<u>利用条件概率 P (图片 | 文本)，可以生成图片特征</u>，通过检索出最靠近该特征向量的两个图片实例，可以得到符合文本描述的图片。</li>\n</ul>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051506598.png\" alt=\"Multimodal DBM 应用\"></p>\n<h4 id=\"协同表征\"><a class=\"markdownIt-Anchor\" href=\"#协同表征\">#</a> 协同表征</h4>\n<p>​\t协同表征（Coordinated Representation）<u>将多模态中的每个模态分别映射到各自的表示空间，但映射后的向量之间满足一定的相关性约束（例如线性相关）</u>。Coordinated 结构并不寻求融合而是建模多种模态数据间的<strong>相关性</strong>，它将多个 (通常是两个) 模态映射到协作空间，表示为：f (x1)～g (x2)，其中 **<u>～</u>** 表示一种协作关系。网络的优化目标是这种协作关系 (通常是相似性，即最小化 cosine 距离等度量)。</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211052203950.png\" alt=\"Coordinated Representation\"></p>\n<p>​\t<u>NIPS 2014</u>（一个关于机器学习和计算神经科学领域的人工智能国际会议) ，利用<strong>协同学习到的特征向量之间满足加减算数运算</strong>这一特性，可以搜索出与给定图片满足 “<strong>指定的转换语义</strong>” 的图片。例如：狗的图片特征向量 - 狗的文本特征向量 + 猫的文本特征向量 = 猫的图片特征向量 -&gt; 在特征向量空间，根据最近邻距离，检索得到猫的图片。</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211090619157.png\" alt=\"多模态向量空间运算\"></p>\n<h3 id=\"翻译translation\"><a class=\"markdownIt-Anchor\" href=\"#翻译translation\">#</a> 翻译 Translation</h3>\n<p>​\t第二个挑战涉及<strong>如何将数据从一种模式转化（映射）到另一种模式</strong>。不仅数据是异构的，而且模态之间的关系通常是开放式的或主观的。例如，存在多种描述图像的正确方法，并且可能不存在一种完美的翻译。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t<u>基于实例的方法</u> <u>模型驱动的方法</u></p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051434189.png\" alt=\"Translation\"></p>\n<h4 id=\"常见应用\"><a class=\"markdownIt-Anchor\" href=\"#常见应用\">#</a> 常见应用</h4>\n<ul>\n<li><strong>机器翻译（Machine Translation）</strong>：将输入的语言 A（即时）翻译为另一种语言 B。类似的还有唇读（Lip Reading）和语音翻译 （Speech Translation），分别将唇部视觉和语音信息转换为文本信息。</li>\n<li><strong>图片描述（Image captioning) 或者视频描述（Video captioning)</strong>： 对给定的图片 / 视频形成一段文字描述，以表达图片 / 视频的内容。</li>\n<li><strong>语音合成（Speech Synthesis）</strong>：根据输入的文本信息，自动合成一段语音信号。</li>\n</ul>\n<h4 id=\"翻译的评估困境\"><a class=\"markdownIt-Anchor\" href=\"#翻译的评估困境\">#</a> 翻译的评估困境</h4>\n<p>​\t多模态翻译方法面临的一个主要挑战是它们很难评估（<u>即在无对错之分的情况下判断哪个是更好的</u>）。语音识别等任务只有一个正确的翻译，而语音合成和媒体描述等任务则没有。有时，就像在语言翻译中，多重答案是正确的，决定哪个翻译更好往往是主观的。</p>\n<ul>\n<li><strong>人工评价</strong>是最理想的评估，但是<u>耗时耗钱</u>，且需要多样化打分人群的背景以避免偏见。</li>\n<li><strong>自动化指标</strong>是视觉描述领域常用的替代方法，包括 BLEU，Meteor，CIDEr，ROUGE 等，但它们被证实与人的评价相关性较弱。</li>\n<li><strong>基于检索的评估</strong>和<strong>弱化任务</strong>，例如：将图像描述中一对多映射简化为 VQA（<u>给机器一张图片和一个开放式的的自然语言问题，要求机器输出自然语言答案，答案可以是以下任何形式：短语、单词、 (yes/no)、从几个可能的答案中选择正确答案。 VQA 是一个典型的多模态问题，计算机需要同时学会理解图像和文字。</u>）中一对一的映射，也是解决评估困境的手段。</li>\n</ul>\n<h3 id=\"对齐alignment\"><a class=\"markdownIt-Anchor\" href=\"#对齐alignment\">#</a> 对齐 Alignment</h3>\n<p>​\t第三个挑战是从<strong>两种或多种不同的模态中识别（子）元素之间的直接关系</strong>。例如，我们可能希望<u>将食谱中的步骤与显示正在制作的菜肴的视频对齐</u>。为了应对这一挑战，我们需要测量不同模式之间的相似性并处理可能的长期依赖和歧义。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t显式对齐 隐式对齐</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051433591.png\" alt=\"Alignment\"></p>\n<h4 id=\"显式对齐\"><a class=\"markdownIt-Anchor\" href=\"#显式对齐\">#</a> 显式对齐</h4>\n<p>​\t如果模型的<strong>主要目标是对齐来自两个或多个模态的子元素</strong>，那么我们将其分类为执行显式对齐。显式对齐的一个重要工作是<strong>相似性度量</strong>。大多数方法都依赖于度量不同模态的子组件之间的相似性作为基本构建块。</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211071349090.png\" alt=\"显式对齐\"></p>\n<p>包括无监督和弱监督的方法：</p>\n<ul>\n<li><strong>无监督对齐</strong>：给定两个模态的数据作为输入，希望模型实现子元素的对齐，但是训练数据没有 “对齐结果” 的标注，模型需要同时学习相似度度量和对齐方式。</li>\n<li><strong>有监督对齐</strong>：有监督方法存在标注，可训练模型学习相似度度量。</li>\n</ul>\n<h4 id=\"隐式对齐\"><a class=\"markdownIt-Anchor\" href=\"#隐式对齐\">#</a> 隐式对齐</h4>\n<p>​\t隐式对齐<strong>用作另一个任务的中间 (通常是潜在的) 步骤。</strong> 这允许在许多任务中有更好的表现，包括语音识别、机器翻译、媒体描述和视觉问题回答。这些模型不显式地对齐数据，也不依赖于监督对齐示例，而是学习如何在模型训练期间潜在地对齐数据。</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211071428784.png\" alt=\"隐式对齐\"></p>\n<h3 id=\"融合fusion\"><a class=\"markdownIt-Anchor\" href=\"#融合fusion\">#</a> 融合 Fusion</h3>\n<p>​\t第四个挑战是<strong>结合来自两个或多个模态的信息</strong>来执行<u>预测</u>。例如，对于视听语音识别，将嘴唇运动的视觉描述与语音信号融合以预测口语。来自不同模态的信息可能具有不同的预测能力和噪声拓扑，并且可能在至少一种模态中丢失数据。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t模型无关的方法</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051435164.png\" alt=\"Fusion\"></p>\n<h4 id=\"模型无关的方法\"><a class=\"markdownIt-Anchor\" href=\"#模型无关的方法\">#</a> 模型无关的方法</h4>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t基于模型的方法</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051436546.png\" alt=\"Fusion\"></p>\n<h4 id=\"基于模型的方法\"><a class=\"markdownIt-Anchor\" href=\"#基于模型的方法\">#</a> 基于模型的方法</h4>\n<h3 id=\"协同学习co-learning\"><a class=\"markdownIt-Anchor\" href=\"#协同学习co-learning\">#</a> 协同学习 Co-learning</h3>\n<p>​\t第五个挑战是在模态的表示和它们的预测模型之间转移知识。协同学习探索了<strong>如何从一种模态中学习的知识帮助在不同模态上训练的计算模型</strong>（<u>使用一个资源丰富的模态信息来辅助另一个资源相对贫瘠的模态进行学习</u>）。当其中一种模式的资源有限（例如，带注释的数据）时，这一挑战尤其重要。辅助模态（helper modality）通常只参与模型的训练过程，并不参与模型\t的测试使用过程</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211051437074.png\" alt=\"Co-learning\"></p>\n<h4 id=\"并行\"><a class=\"markdownIt-Anchor\" href=\"#并行\">#</a> 并行</h4>\n<p>​\t需要训练数据集，其中来自一种模态的观察结果与来自其他模态的观察结果直接相关，例如在一个视听语音数据集中，视频和语音样本来自同一个说话者。</p>\n<h4 id=\"非并行\"><a class=\"markdownIt-Anchor\" href=\"#非并行\">#</a> 非并行</h4>\n<p>​\t不需要来自不同模式的观察结果之间的直接联系，通常通过使用类别重叠来实现共同学习，例如，在零样本学习中，使用来自 Wikipedia 的纯文本数据集扩展传统的视觉对象识别数据集以改进视觉对象识别的泛化能力。</p>\n<h4 id=\"混合\"><a class=\"markdownIt-Anchor\" href=\"#混合\">#</a> 混合</h4>\n<p>​\t通过共享模式或数据集桥接</p>\n<h2 id=\"sota模型-clip\"><a class=\"markdownIt-Anchor\" href=\"#sota模型-clip\">#</a> SOTA 模型 - CLIP</h2>\n<p>​\t<strong>CLIP</strong>，全称 Contrastive Language-Image Pre-training，是 OpenAI 最新的一篇 NLP 和 CV 结合的<u>多模态</u>的工作，在多模态领域迈出了重要的一步。</p>\n<p><img src=\"https://oss.imzhanghao.com/img/202211081504107.png\" alt=\"CLIP Zero shot\"></p>\n<p>​\t\t\tCLIP 主要的贡献就是<u>利用无监督的文本信息，作为监督信号来学习视觉特征</u>。</p>\n",
            "tags": [
                "MultiModal Learning"
            ]
        },
        {
            "id": "http://aer0liteee.github.io/post/f862a75e.html",
            "url": "http://aer0liteee.github.io/post/f862a75e.html",
            "title": "Cyber-Code-Intelligence-for-malware-detection",
            "date_published": "2023-07-09T10:15:13.000Z",
            "content_html": "<h1 id=\"cyber-code-intelligence-for-malware-detection\"><a class=\"markdownIt-Anchor\" href=\"#cyber-code-intelligence-for-malware-detection\">#</a> Cyber Code Intelligence for malware detection</h1>\n<p>[TOC]</p>\n<h2 id=\"摘要\"><a class=\"markdownIt-Anchor\" href=\"#摘要\">#</a> 摘要</h2>\n<p>​\t不断演变的安卓恶意软件对移动用户构成了严重的安全威胁，基于机器学习 (ML) 的防御技术吸引了积极的研究。由于缺乏知识，许多<strong>零日家族的恶意软件</strong>可能仍然没有被发现直到分类器获得专门的知识。<u>大多数现有的基于 ML 的方法将需要很长的时间来学习最新的恶意软件家族景观中的新恶意软件家族</u>。现有的基于 ML 的 Android 恶意软件检测和分类方法很难应对恶意软件的快速演变，特别是在零日恶意软件家族的出现和单视图特征的有限代表性方面。</p>\n<h2 id=\"目的\"><a class=\"markdownIt-Anchor\" href=\"#目的\">#</a> 目的</h2>\n<p>​\t在这篇文章中，我们开发了一个新的 **<u>多视图特征智能 (MFI)</u>** 框架，<u>从已知的恶意软件家族中学习目标能力的表示，以识别具有相同能力的未知和不断变化的恶意软件</u>。</p>\n<p>​\t新框架执行逆向工程以提取多视图异质特征包括：</p>\n<ol>\n<li>\n<p>语义字符串特征、</p>\n</li>\n<li>\n<p>API 调用图特征</p>\n</li>\n<li>\n<p>smali 操作码（<strong><u>smali opcode</u></strong>）顺序特征。</p>\n<ul>\n<li>\n<p><strong>Smali Opcode</strong> 是一种用于描述 Android Dalvik 虚拟机指令的语言。<u>Dalvik 虚拟机是 Android 操作系统上运行应用程序的基础</u>。</p>\n<p>Smali Opcode <u>使用基于文本的语法来描述 Dalvik 字节码指令</u>。<u>它是一种类汇编语言，用于编写和修改已编译的 Android 应用程序的字节码</u>。</p>\n<p>每个 Dalvik 指令都由<u>一个操作码（opcode）和零个或多个操作数</u>组成。操作码表示特定操作的类型，例如加载值到寄存器、进行算术运算或跳转等。操作数提供了指令所需的数据。</p>\n<p>Smali Opcode 在文本文件中按顺序列出指令，并使用特定的语法来定义操作码和操作数。示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const/4 v0, 0x1</span><br><span class=\"line\">const/16 v1, 0x64</span><br><span class=\"line\">add-int v2, v0, v1</span><br><span class=\"line\">return v2</span><br></pre></td></tr></table></figure>\n<p>上述示例中的代码片段演示了一些常见的 Smali Opcode。其中，指令  <code>const/4</code>  将整数常量值（0x1）加载到寄存器  <code>v0</code>  中，指令  <code>const/16</code>  加载整数常量值（0x64）到寄存器  <code>v1</code>  中，指令  <code>add-int</code>  将寄存器  <code>v0</code>  和  <code>v1</code>  中的值相加，并将结果放入寄存器  <code>v2</code>  中，最后的  <code>return</code>  指令将结果从方法中返回。</p>\n<p>通过<u>使用 Smali Opcode，开发人员可以直接修改编译后的应用程序的字节码，以实现一些高级功能、优化性能或进行代码混淆等操作</u>。然而，修改已编译的字节码需要对 Smali Opcode 语法和 Dalvik 指令集有一定的了解。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>​\t它可以通过一系列的<u>特征分析、选择、聚合和编码过程</u>从已知的恶意软件家族中学习目标能力的表示，以检测具有共享目标能力的未知 Android 恶意软件。我们创建了一个新的数据集，其中有关于能力的真实信息。在新数据集上进行了许多实验，以评估新方法的性能和有效性。结果表明，在检测具有目标能力的未知 Android 恶意软件时，新方法优于三种最先进的方法，包括:</p>\n<ol>\n<li>Drebin</li>\n<li>MaaDroid</li>\n<li>N-opcode</li>\n</ol>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>​\tAndroid 在移动操作系统中占<strong>主导地位</strong>，全球有<u>74.13%</u>的手机运行安卓系统。根据 Statista 的报告，在 2019 年 12 月。仅在官方的 GooglePlay 应用商店中，就有近 300 万个 Android 应用软件。在 2020 年第一季度，尽管从 2018 年初 360 万的峰值下降，但仍有很多应用程序可用 。<u>安卓系统的普及为安卓恶意软件作者提供了激励</u>，而<u>对安卓应用程序进行逆向工程的方法相对容易</u>，导致安卓恶意软件的蓬勃发展。</p>\n<p>​\tAndroid 恶意软件家族存在三个主要问题。</p>\n<ol>\n<li>首先，在<u>建立安卓恶意软件家族方面没有统一的标准</u>，因此大多数反病毒公司对家族的命名都不一样。这种临时性的方法为快速分享零日恶意软件的知识造成了障碍。ViruusTotal 通过应用多数投票策略，为特定的恶意软件样本确定一个单一家族的类别标签，从而缓解了命名不一致的问题。</li>\n<li>其次，安卓恶意软件家族的数量在 2018 年超过了 1000 个 ，并且不断激增，没有任何放缓的迹象。由于人类的错误和误判，安卓恶意软件家族的<u>爆炸性增长</u>挑战了从人类专家到基于 ML 的检测器的知识转移。</li>\n<li>第三，<u>安卓恶意软件家族的分布是高度倾斜</u>的，因为在大多数家族中只有少数几个样本可用。例如，在大约 58% 的 Android 恶意软件家族中，只有不到五个样本在 Drebin 数据集中。<u>安卓恶意软件的高度不平衡分布，对特征分析和模式识别的过程提出了挑战</u>。因此，需要另一种替代性的分类方法来检测安卓零日恶意软件。</li>\n</ol>\n<h3 id=\"主要贡献\"><a class=\"markdownIt-Anchor\" href=\"#主要贡献\">#</a> 主要贡献</h3>\n<p>​\t\t这篇文章的主要贡献有三方面。</p>\n<ol>\n<li>\n<p><u>对安卓恶意软件的恶意能力进行了深入的分析</u>，并<u>创建了一个带有验证过的地面真实性分配的数据集</u>，<u>用于检测具有针对性能力的不断发展的安卓恶意软件</u>。（这个名为 &quot;<strong><u>CAPA</u></strong>&quot; 的新数据集将向公众发布为 Android 恶意软件的新研究提供启示。）</p>\n</li>\n<li>\n<p>我们提出了一种新的<u>多视图特征智能 (MFI)</u> 方法。MFI 提取多视图异质特征 (源代码视图、API 图形调用视图和 smali 操作码视图。<u>MFI 将这些特征聚集成一个统一的表示，用于描述恶意的能力</u>。此外，MFI 表示可以被送入一个神经模型，以识别具有目标能力的零日恶意软件。</p>\n</li>\n<li>\n<p>我们进行了大量的实验，从几个方面评估新的 MIFI 方法，包括<u>识别精度、处理零日系恶意软件的有效性、识别效果和可扩展性</u>。MFI 胜过了三种最先进的方法，包括:</p>\n<ul>\n<li>Drebin</li>\n<li>MaMaDroid</li>\n<li>N-opcode</li>\n</ul>\n<p>在检测具有目标能力的未知安卓恶意软件时。这项工作的所有数据、代码和报告都将在 Github 上发布 (<a href=\"https://github.com/JunTomyang/Android-Malware-Capability-Identification\">https://github.com/JunTomyang/Android-Malware-Capability-Identification</a>)</p>\n</li>\n</ol>\n<h3 id=\"文章结构\"><a class=\"markdownIt-Anchor\" href=\"#文章结构\">#</a> 文章结构</h3>\n<p>​\t\t本文的其余部分结构如下：</p>\n<ul>\n<li>第二节介绍了<u>Android 恶意软件检测和家族分类的相关工作</u></li>\n<li>第三节<u>讨论我们提出的方法</u></li>\n<li>第四节介绍了与<u>基线方法的比较实验和一些详细的分析</u></li>\n<li>第五节给出<strong>结论</strong></li>\n</ul>\n<h2 id=\"相关工作\"><a class=\"markdownIt-Anchor\" href=\"#相关工作\">#</a> 相关工作</h2>\n<p>​\t表一比较和对比了我们的研究工作和最先进的工作，包括 DroidAPIMiner、Drebin 、DroidSIFT、HinDroid、MaMaDroid 和 ASTROID。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64a980f11ddac507ccb84e3d.jpg\" alt=\"表一 &amp;&amp; 图一\"></p>\n<p>​\t我们专注于开发一种新的 MFI 方法，以识别具有目标能力的不断发展的 Android 恶意软件。这项工作的目的是<u>识别零日家族的新恶意软件样本</u>。</p>\n<h2 id=\"u网络代码情报的新方法u\"><a class=\"markdownIt-Anchor\" href=\"#u网络代码情报的新方法u\">#</a> <u>网络代码情报的新方法</u></h2>\n<p>​\t\t图 1 概述了我们提出的用于检测具有目标能力的恶意软件的 MFI。我们将恶意能力识别作为一个二元分类问题。一类是具有目标能力的恶意软件，而另一类则没有这种能力。给出原始 APK 样本，进行逆向工程以拆解二进制代码，然后提取多视图异质特征来重新发送恶意软件样本。将进行特征编码和聚合，以去除噪声和不相关的特征，并将多视图特征转换为向量，从而准确反映恶意软件恶意能力的内在特征。应用深度神经模型对输入的表示向量进行二元分类。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64a982641ddac507ccbb69bc.jpg\" alt=\"多视图特征智能 (MFI)框架流程图 \"></p>\n<ul>\n<li>\n<p><strong>MFI 流程图</strong></p>\n<ul>\n<li>收集特定能力的训练恶意软件</li>\n<li>静态分析的逆向工程</li>\n<li>从反汇编的代码中解析原始信息</li>\n<li>提取多视图异构特征</li>\n<li>异构特征预处理</li>\n<li>多视图特征融合</li>\n<li>训练深度神经网络进行能力识别</li>\n</ul>\n<h3 id=\"新数据和地面实况\"><a class=\"markdownIt-Anchor\" href=\"#新数据和地面实况\">#</a> 新数据和地面实况</h3>\n<p>​\t当把大量的安卓恶意软件与适当的安全 / 隐私相关能力联系起来时，MFI 的直接挑战之一就出现了。据我们所知，在现有的研究数据集中，<u>安全 / 隐私相关的能力没有明确的标签</u>。由于缺乏定义明确的基础真相，现有的公开可用的安卓系统恶意软件数据集需要进一步的标记过程。因此，我们创建了一个<strong>带有能力注释的安卓恶意软件数据集</strong>，我们将其称为 **<u>CAPA 数据集</u>**。</p>\n<p>​\t<u>CAPA 数据集是通过聚合两个著名的安卓恶意软件数据集 Drebin 和 AMD 得到的</u>。</p>\n</li>\n<li>\n<p><strong>Drebin 数据集</strong>包含 5560 个安卓恶意软件应用，来自于 2010 年 8 月至 2012 年 10 月期间收获了 179 个恶意软件家族。</p>\n</li>\n<li>\n<p><strong>AMD 数据集</strong>包含 2010 年至 2016 年期间收集的 71 个不同恶意软件家族的 24 553 个 Android 恶意软件样本。</p>\n<blockquote>\n<p>AMD 数据集比 Drebin 数据集要新，被社区的研究人员广泛使用。</p>\n</blockquote>\n</li>\n</ul>\n<p>​\tCAPA 数据集由 2010 年至 2016 年七年间的 Android 恶意软件样本组成。随着 17 个家族在 Drebin 和 AMD 数据集之间的重复，<u>在最新版本的 CAPA 数据集中，总共包括 72 个家族或 7110 个应用程序。</u></p>\n<p>​\t为了验证我们提出的 MFI 的有效性，作为一个概念证明，我们选择了四种非常常见的能力作为案例研究，它们与四个主要的网络安全问题非常一致: <strong>远程控制、特权、货币化和隐私</strong>。不出所料，<u>许多恶意样本拥有这四种能力中的一种或几种</u>：</p>\n<ol>\n<li>僵尸网络攻击 (远程控制)</li>\n<li>未经授权的 root 访问 (权限)</li>\n<li>恶意短信收费 (货币化)</li>\n<li>窃取信息 (隐私)</li>\n</ol>\n<p>能力类别的完整列表见表二</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa0fed1ddac507cc6cf914.png\" alt=\"与安全/隐私相关的能力列表\"></p>\n<h3 id=\"多视图异构结构特征\"><a class=\"markdownIt-Anchor\" href=\"#多视图异构结构特征\">#</a> 多视图异构结构特征</h3>\n<p>​\t为了全面描述安卓恶意软件，以便更好地识别与安全隐私有关的能力，我们提取了三个异质特征的视图来代表安卓恶意软件样本。</p>\n<ol>\n<li>\n<p><strong>源代码中的语义字符串特征:</strong></p>\n<p>​\t在这项工作中，从<strong> AndroidManifestxml</strong> 文件中提取各种类型的语义信息以形成特征。 <u>AndroidManifestxm 文件驻留在所有 Android 应用包的根目录中，并向 Android 系统提供关于应用的基本信息</u>。这四个基本信息来源包括：</p>\n<ul>\n<li><strong>应用程序要求的权限</strong></li>\n<li><strong>应用程序的软件组件</strong></li>\n<li><strong>应用程序要求的硬件组件</strong></li>\n<li><strong>过滤的意图</strong></li>\n</ul>\n<p>​    这四类信息可以被有效提取，以反映安卓应用的部分特征。具体来说，<u>安卓应用在访问包含敏感信息的资源之前，需要请求终端用户授予某些权限</u>。</p>\n</li>\n<li>\n<p><strong>第二个主要的信息来源是从字节码 classes.dex 文件中提取的：</strong></p>\n<p>​\t对字节码进行反汇编，以检索语义信息，包括应用中使用的 API 调用和数据。四个基本信息源包括：</p>\n<ul>\n<li><strong>受限的 API 调用</strong></li>\n<li><strong>可疑的 API 调用</strong></li>\n<li><strong>使用的权限</strong></li>\n<li><strong>网络地址</strong></li>\n</ul>\n<p>​    这四种类型的信息提供了字节码的足迹。具体来说，<u>受限的 API 调用表明应用程序的敏感功能</u>；<u>可疑的 API 调用暴露了 Android 恶意软件的安全 / 隐私相关行为</u>；<u>权限信息共同反映了多个 API 调用的关系</u>；<u>网络地址可能与已知的恶意网站或僵尸网络有关</u>。</p>\n<p>​\t为了从原始恶意软件中获得这些字符串特征，我们使用开源工具 Androguard ( <a href=\"https://github.com/androguard/androguard\">https://github.com/androguard/androguard</a>)。 Androguard 帮助我们从 classes.dex 文件中拆解字节码，并根据上述类别从 AndroidManifest.xml 文件中收集信息。提取的信息形成了语义特征，可以有效地在源代码层面上表示 Android 恶意软件。</p>\n<p>​\t<strong>Androguard</strong> 是使用 Python 编写的逆向工具，它可以在多个平台上运行 Linux/Windows/OSX。使用它可以反编译 android 应用，也可以用来做 android app 的静态分析（static analysis）</p>\n<ul>\n<li>\n<p><strong><a href=\"http://androapkinfo.py\">androapkinfo.py</a></strong> 查看 apk 文件的包、资源、权限、组件、方法等信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">./androapkinfo.py -i ./test.apk</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong><a href=\"http://androxml.py\">androxml.py</a></strong> 解密 apk 包中的 AndroidManifest.xml 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">./androxml.py -i -i ./test.apk</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>​    在这篇文章中，我们捕获了结构性 API 调用图，以减轻 Android 恶意软件数据集中的规避样本，下图 2 显示了提取 API 调用图特征的过程。<u>API 调用图被提取并嵌入到矢量表示中，旨在捕获恶意软件的行为</u>。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa18541ddac507cc7e292e.jpg\" alt=\"API调用图特征的过程\"></p>\n<ul>\n<li>提取 API 调用图</li>\n<li>抽象 API 到家庭颗粒度</li>\n<li>将 API 调用图嵌入到 向量中</li>\n</ul>\n</li>\n<li>\n<p><strong>来自中间的 smali 代码的操作码顺序特征：</strong></p>\n<p>​\t作为字节码 classes.dex 文件的汇编器 / 反汇编器，<u>smali/baksmali 提供 smali 语言的人类可读代码</u>， <u>smali 代码比 Dalvik 虚拟机用来执行 Android 应用程序的机器代码更容易解释</u>。</p>\n<p>​\t在本文中，根据 smali 编程规范，字节码 classes.dex 文件被拆解为一组 smali 代码。classes.dex 文件中的每个类都被翻译成一个单独的 smali 文件，每个 smali 文件都包含相应类中的多个方法。<u>每个 smali 条目由个操作码和多个操作数组成</u>，其格式为人类可读的。</p>\n<p>​\t<u>操作码被分为七个核心指令集以简化分类器的设计</u>, 具体来说，这些指令集是<strong> Move,Return,Goto,If,Get,Put,Invoke</strong>。操作码的分离有助于有效地区分相关的操作数，表三总结了指令集的七种类型。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa18e11ddac507cc7f7e56.png\" alt=\"指令集的七种类型\"></p>\n<p>​\t随后，获得一个 n-grams（n 元语法）表示，以代表安卓恶意软件。对于一个完整的表示，<u>通过遍历翻译后的 smali 文件来提取操作码序列，以保留 Android 恶意软件的信息，这种安排保证了在 smali 操作码级别的粒度</u>。</p>\n</li>\n</ol>\n<h3 id=\"特征编码和聚合\"><a class=\"markdownIt-Anchor\" href=\"#特征编码和聚合\">#</a> 特征编码和聚合</h3>\n<p>​\t\t在这项工作中，<strong>多视图的异构特征被预先处理，以形成最终的联合向量表示</strong>。为了减少特征维度，去除不相关的特征，缓解下面深度神经网络的复杂性，对于源码中的语义字符串特征，我们根据不同的安全 / 隐私相关能力的特点选择关键的特征子集。例如，对于，恶意短信战能力，将选择<u>SEND SMS</u>、<u>RECEIVE SMS</u> 和<u>WRITE SMS</u>相关的权限特征。</p>\n<blockquote>\n<p><strong>SMS</strong> 是<u>Short Messaging Service（短消息服务）</u>的缩写，是一种使用移动设备可以发送和接收文本信息的技术短信内容，以文本、数字或二进制非文本数据为主，目前，这种短消息的长度被限定在 140 字节之内。</p>\n</blockquote>\n<p>​\t对于结构性 API 调用图的特点，如图 2 所示，以提高对 API 变化的弹性并实现可扩展性。因此，所有的 API 调用都被抽象为开发者定义的家族、混清的家族或九个安卓原生家族之一，包括:</p>\n<p>​\tl) com.google 2) xml 3) apache 4)javax 5) java 6) android 7) dom 8) json 9) dalvik</p>\n<p>​\t这些家族是 Android 操作系统的一部分，<u>它们提供了许多不同的 API，可以用于开发 Android 应用程序</u>，这些 API 包括网络、数据库、图形、用户界面和其他功能。</p>\n<p>​\t在所有视图的特征向量生成后，<u>我们将这些特征向量汇总，为每个恶意软件应用构建一个联合特征向量</u>。因此，<strong>最终的特征向量有 149 个维度</strong>。</p>\n<h3 id=\"通过神经模型进行能力识别\"><a class=\"markdownIt-Anchor\" href=\"#通过神经模型进行能力识别\">#</a> 通过神经模型进行能力识别</h3>\n<p>​\t在这一步，安全 / 隐私相关的能力识别任务被执行，即识别具有信息窃取能力的 Android 恶意软件。最近的一个趋势显示，基于深度神经网络的解决方案在检测安卓恶意软件方面很受欢迎。<u>一旦用高质量的数据进行训练，深度神经网络可以有效地学习安卓恶意软件的复杂特征和行为</u>。在这篇文章中，我们构建了一个深度神经网络架构来进行能力识别任务，同时<strong>通过对安卓恶意软件的紧凑表示来实现高的能力识别精度</strong>。</p>\n<p>​\t对于具体的能力，网络结构在层数和神经元的数量上有微小的变化。<strong>优化器</strong>从<u>&quot;SGD”、&quot;Adadelta”、&quot;RMSprop 和&quot;Adamax&quot;</u>中选择。而<strong>损失函数</strong>的选择是 “<u>binary crossentropy</u>”。<strong>过度拟合是深度神经网络的主要问题之一</strong>，在这项工作中，<strong>为了缓解过拟合的问题，我们应用了 dropout 正则化技术</strong>。</p>\n<p>​\t在我们的深度神经网络的训练阶段，验证集是用训练集的 20% 形成的，以监测训练集和验证集的准确性趋势。<strong>验证集表明模型的训练是否正确，是否有过度拟合</strong>。如果训练集和验证集的精度增长明显不同，那么学习过程将被终止，并在重新开始训练过程之前修改建模参数以避免过拟合问题。</p>\n<h2 id=\"对mfi的性能评估\"><a class=\"markdownIt-Anchor\" href=\"#对mfi的性能评估\">#</a> 对 MFI 的性能评估</h2>\n<h3 id=\"实验环境\"><a class=\"markdownIt-Anchor\" href=\"#实验环境\">#</a> 实验环境</h3>\n<p>​\t为了验证我们提出的 MFI 的有效性，作为概念验证，本文选择了<strong>四</strong>种常见的、具有代表性的安全 / 隐私相关功能（<strong>僵户网络政击、未经授权的根访问、恶意短信收费和信息窃取</strong>）作为案例研究来进行实验。为了模拟零日恶意软件家族的识别，<u>训练数据只包括恶意软件家族的一个子集</u>，而<u>测试集包含在训练过程中未见过的恶意软件家族</u>。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa2d9a1ddac507cca69446.jpg\" alt=\"数据集信息\"></p>\n<p>​\t表四中列出了用于<u>零日家族恶意软件能力识别的数据集的信息</u>。在训练深度神经网络时，<strong>20% 的训练集被随机分割为验证集</strong>，<strong>深度神经网络是用 Keras 库、Scikit-learn 和 Tensorflow 实现的</strong>。</p>\n<h3 id=\"mfi与最先进的方法的比较\"><a class=\"markdownIt-Anchor\" href=\"#mfi与最先进的方法的比较\">#</a> MFI 与最先进的方法的比较</h3>\n<p>​\t现有的工作没有解决李日家族恶意软件的安全隐私相关能力识别问题。我们选择了三个<strong>能够进行恶意软件家族分类的基线模型</strong>，包括（前文提到）：</p>\n<ol>\n<li><strong>Drebin</strong> 是第一个用线耳支持向量机分类器进行家庭分类任务的基线方法。</li>\n<li><strong>MaMaDroid</strong> 是第二种基线方法，采用恶意软件家族模式和随机森林分类器。</li>\n<li><strong>N-opcode</strong> 是第三种基线方法，N=4，采用随机森林算法。</li>\n</ol>\n<blockquote>\n<p><strong>基线方法</strong>是指在机器学习中，<u>使用一些简单的模型作为基准，然后使用更复杂的模型来比较性能</u>。这些简单的模型被称为基线模型，它们可以是随机分类器、最常见类别分类器、简单线性回归和常数预测等。</p>\n</blockquote>\n<p>下图表五列出了我们提出的 MFI 和基线方法之间的性能比较</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa2f831ddac507cca9bb9c.jpg\" alt=\"\"></p>\n<p>​\t在表五中，不难发现，<strong>MFI 在识别安全 / 隐私相关能力方面均优于基线方法</strong>。MFI 的成功归功于三个因素 - 多视图异构特征：<u><strong>基于领域知识的特征选择</strong></u>和<u><strong>API 调用抽象</strong></u>，以及<u><strong>微调的深度神经网络架构</strong></u>。</p>\n<h3 id=\"对能力依赖的理解\"><a class=\"markdownIt-Anchor\" href=\"#对能力依赖的理解\">#</a> 对能力依赖的理解</h3>\n<p>​\t<strong>选择适当的特征来反映特定能力的内在特征</strong>，对于准确捕捉不同安全 / 隐私相关能力的模式至关重要。因此，我们进一步确认并确保权限包龄和 API 调用的功能与 Android 开发者文档中的描述一致</p>\n<ul>\n<li>\n<p><strong>僵尸网络</strong>攻击能力的特征是根据以下三个标准来选择的：</p>\n<ul>\n<li>标准 1：与网络或 WiFiManger 有关的权限和 API 调用功能。</li>\n<li>标准 2：与 PushService 或 HttpConnection 相关的服务或 API 调用功能。</li>\n<li>标准 3：一些不受信任的网络地域如 URL 功能。</li>\n<li><strong>僵尸网络遭网络功击能力的特征数量为 100</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>具有未经授权的 root 访问能力的恶意软件将削弱安卓设备的安全性并获得特权访问</strong>。</p>\n<ul>\n<li>恶意软件在获得 root 权限后可以做的事情将没有限制。像 <u>REBOOT</u>、<u>ACCESS _SUPERUSER</u>或<u>exec()</u>等功能将被识别。</li>\n<li>如果满足以下标准之一，那么该功能将被选择为未经授权的 root 访问能力。\n<ul>\n<li>标准 1：与<strong> System/bin/su</strong> 有关的 API 调用特征或 <strong>Ljava/Lang/Runime—&gt;exec</strong></li>\n<li>标准 2：PackageManager 相关的权限或 API 调用功能，包括在安装软件包、卸载 软件包、更新软件包、删除软件包和重言软件包等方面</li>\n<li>标准 3： 与 <strong>Bool_Compleled</strong> 或<strong> update_device_state</strong> 有关的服务和 BroadCast Receiver 特性。</li>\n<li>标准 4：与<strong> Receive_Boot_Compleled</strong> 相关的意图和行动特征。</li>\n</ul>\n</li>\n<li><strong>未经授权的 root 访问能力的特征数量为 160</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>恶意软件</strong>拥有恶意短信收费能力，可<u>在用户不知情的情况下在后台向高级服务发送短信</u></p>\n<ul>\n<li>所选择的与短信有关的功能包括\n<ul>\n<li><strong>WRITE SMS 、SEND SMS 、sendTextmessage()</strong></li>\n</ul>\n</li>\n<li>详细的功能选择标准如下。\n<ul>\n<li>标准 1：Sms Manager 相关的权限和 API 调用功能，包括<u>send_sms</u>、<u>receive_sms</u>和<u>write_sms</u>。</li>\n<li>标准 2：行动和服务功能，包括<u>Data_Sms_Received</u> 和 <u>Smssenderservice</u></li>\n<li>标准 3：BroadCastReceiver 的相关功能，包括<u>SmsReceived</u>和<u>MessageReceived</u>。</li>\n</ul>\n</li>\n<li><strong>恶意短信收费能力的特征数量为 80 个</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>信息窃取</strong>功能将收集用户的感性和隐私信息如联系人名单、位置或设备 ID，然后将其发送到远程服务器。</p>\n<ul>\n<li>\n<p>以下 5 条标准适用于信息窃取能力的过滤特征</p>\n<ul>\n<li>\n<p>标准 1：涉及<u>敏感位置信息</u>的特征 ，包括<strong> access_coarse_location,</strong></p>\n<p><strong>access_fifine_location 和 locationmanager</strong></p>\n</li>\n<li>\n<p>标准 2：<u>私人信息</u>相关的功能，包括<strong> read_contacts,read_logs, read_history_bookmarks 和 read_phone_state</strong></p>\n</li>\n<li>\n<p>标准 3：<u>不受信任的网络地址 URL</u></p>\n</li>\n<li>\n<p>标准 4：SmsManager 相关权限和 API 调用功能，包括<strong> send_sms、receive_sms 和 write_sms</strong></p>\n</li>\n<li>\n<p>标准 5：行动和服务特征，包括<strong> Data_Sms_Received 和 SmsSenderService.</strong></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>信息窃取能力的特征数量为 60。</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>​\t为了研究能力相关特征选择的有效性，以<u>恶意短信收费能力</u>为例，我们使用 t 分布式随机邻居嵌入 (t-SNE) 算法展示了测试恶意软件的可视化。t-SNE 是一种降维的方法，特别适合数据集的可视化。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa394d1ddac507ccbda536.jpg\" alt=\"图3\"></p>\n<p>​\t图 3 (a) 是使用完整特征集的恶意软件的可视化结果，而图 3 (b) 显示的是基于选定的能力相关特征的结果。<strong>红点表示拥有恶意短信收费能力的恶意软件，而绿点表示没有恶意短信收费能力的恶意软件样本</strong>。因此，所选择的特征是有辨别力的。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa39ac1ddac507ccbe470b.jpg\" alt=\"图4\"></p>\n<p>​\t<strong>Baseline</strong> 是使用完整特征集的结果  <strong>CDFS</strong> 是指使用所选的依赖能力的特征子集的性能</p>\n<p>​\t因为使用与能力相关的特征有明显的可视化结果。我们还在图 4 中展示了使用全部特征集或选定的能力相关特征的直接性能 (<strong>准确度得分和 F1 得分</strong>) 的比较。因此，<u>使用选定的特征集会有很大的改进</u>。</p>\n<h3 id=\"单视图与多视图功能\"><a class=\"markdownIt-Anchor\" href=\"#单视图与多视图功能\">#</a> 单视图与多视图功能</h3>\n<p>​\t本实验验证了多视图功能是否比单视图功能提供更好的性能，同时确定了零日家庭的安全 / 隐私相关能力。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa3bb61ddac507ccc1eea1.jpg\" alt=\"表6\"></p>\n<p>​\t实验结果列于表六。<strong>多视图特征的结果优于单视图特征</strong>，在准确率得分和 F1 得分方面分别有大约 1%-4% 和 2%-4% 的提高。</p>\n<p>​\t在这项工作中，深度神经网络被设计用来识别恶意软件的安全 / 隐私相关能力。我们研究了识别遭广网各政击能力的深度神经网络的训练和验证损失。<u>训练后的深度神经网络在 300 个 epochs 内迅速收敛</u>。多视图异构特征的直接融合在识别安全 / 隐私相关能力方面的辨别力不够，然而<u>通过使用深度神经网络，可以学习到紧凑的、有鉴别力的表述</u>。这些结果表明，所创建的深度神经网络在聚合多视图异构特征方面是强大的。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>​\t在这篇文章中，提出了一个新的问题来识别<strong>零日安卓恶意软件</strong>。为了解决所提出的研究问题，我们设计了一种新的轻量级方法<strong> MFI</strong> 来<u>自动识别新检测到的 Android 恶意软件的能力</u>。为了充分捕捉恶意软件的能力特征 MFI，我们<u><strong>使用多视图异构特征来表示每个恶意软件</strong>，包括来自源代码的语义字符串特征、结构性 API 调用图特征和 smali 操作码序列特征。</u>我们还设计了一个基于源代码视图的能力相关特征视图。对于每个给定的能力，一个单一的深度神经网络将被训练，以确定测试的恶意软件是否具有特定能力。</p>\n<p>​\t在这项工作中，深度神经网络被设计用来识别恶意软件的安全 / 隐私相关能力。多视角异质特征的直接融合在识别安全隐私相关能力方面的区分度不够。<strong>通过使用深度神经网络，可以学习到紧凑的、有辨别力的表征。这些结果表明，创建的深度神经网络在聚合多视角异质特征方面是强大的。</strong></p>\n",
            "tags": [
                "malware"
            ]
        },
        {
            "id": "http://aer0liteee.github.io/post/33e09c9c.html",
            "url": "http://aer0liteee.github.io/post/33e09c9c.html",
            "title": "GNN-summary",
            "date_published": "2023-07-05T09:30:02.000Z",
            "content_html": "<h1 id=\"gnn\"><a class=\"markdownIt-Anchor\" href=\"#gnn\">#</a> GNN</h1>\n<h4 id=\"应用领域\"><a class=\"markdownIt-Anchor\" href=\"#应用领域\">#</a> 应用领域</h4>\n<ul>\n<li></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">场景分析与问题推理、推荐系统、欺诈检测、知识图谱、道路交通、自动驾驶、化学医疗场景......</span><br></pre></td></tr></table></figure>\n<h4 id=\"图基本模块定义\"><a class=\"markdownIt-Anchor\" href=\"#图基本模块定义\">#</a> 图基本模块定义</h4>\n<ul>\n<li>\n<p><img src=\"https://pic.imgdb.cn/item/64aa899f1ddac507cc6b8006.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GNN 又称图神经网络，是一种直接作用于图结构的神经网络，我们可以把图中的每一个结点 V 当作个体对象，而每一条边 E 当作个体与个体间的某种联系，所有结点组成的关系网就是最后的图 U</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"邻接矩阵的定义\"><a class=\"markdownIt-Anchor\" href=\"#邻接矩阵的定义\">#</a> 邻接矩阵的定义</h4>\n<ul>\n<li>\n<p><img src=\"https://pic.imgdb.cn/item/64aa899f1ddac507cc6b808d.png\" alt=\"\"></p>\n<blockquote>\n<ul>\n<li>用于表示结点之间相邻的情况，由于图的稀疏性，因此一般的邻接矩阵不是一个 N*N 的矩阵，而保留了 **(source,target)** 的形式，如 [1,0] 则表示起点为 1 终点为 0。</li>\n<li>每个点通过与它相邻的<strong>邻居</strong>来进行<strong>更新</strong>，更新的方式可以自己设置。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"适用规则\"><a class=\"markdownIt-Anchor\" href=\"#适用规则\">#</a> 适用规则</h4>\n<ul>\n<li></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GNN主要用于解决输入数据不规则的时候，由于图像和文本任务中输入格式很固定，因此图模型并不常用，图网络和其他的神经网络类似都是需要进行特征提取</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息传递方法计算\"><a class=\"markdownIt-Anchor\" href=\"#消息传递方法计算\">#</a> 消息传递方法计算</h4>\n<ul>\n<li>\n<p>每个点的特征该如何更新？</p>\n<ul>\n<li>\n<p>考虑<strong>自身</strong>的特征与<strong>邻居</strong>的特征。</p>\n</li>\n<li>\n<p><img src=\"https://pic.imgdb.cn/item/64aa89a01ddac507cc6b811e.png\" alt=\"\"></p>\n</li>\n<li>\n<p><img src=\"https://pic.imgdb.cn/item/64aa89a01ddac507cc6b8182.png\" alt=\"\"></p>\n<blockquote>\n<p>​\t\t\t\t\t自身特征：<strong>h/x</strong>\t可学习参数 (相连边的权值)：<strong>W</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>特征更新的方法有很多，可以根据任务自己设置</p>\n<ul>\n<li><img src=\"https://pic.imgdb.cn/item/64aa89a01ddac507cc6b814c.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"多层gcn的作用\"><a class=\"markdownIt-Anchor\" href=\"#多层gcn的作用\">#</a> 多层 GCN 的作用</h4>\n<ul>\n<li>\n<p>GCN 可以有多层（本质即更新各部分的特征）</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa89f01ddac507cc6c55e0.png\" alt=\"\"></p>\n</li>\n<li>\n<p>GNN 可以设置为多层结构时的<strong>输入</strong>和<strong>输出</strong>都是特征，邻接矩阵不会改变，但每个点上面的特征会发生改变。多层的 GNN 会包含更多的邻居，相当于此时的 **“感受野”**（<u>卷积神经网络名词，可理解为接触到的全局的信息范围）</u><strong>增大</strong>，当每个点具有全局的特征时，此时类似于 transformer 的形式。</p>\n</li>\n<li>\n<h5 id=\"输出特征的作用\"><a class=\"markdownIt-Anchor\" href=\"#输出特征的作用\">#</a> 输出特征的作用</h5>\n<ul>\n<li>各个点 / 边特征组合后可以进行图分类…</li>\n</ul>\n</li>\n<li>\n<h5 id=\"为什么要做多层gcn\"><a class=\"markdownIt-Anchor\" href=\"#为什么要做多层gcn\">#</a> 为什么要做多层 GCN？</h5>\n<ul>\n<li>可以使结点具有<strong>全局的特征</strong>，GCN 主要聚合邻结点的信息，对于任意一个结点，结点特征每迭代依次，就聚合了更高阶的邻结点的信息。随着 GCN 层数的增加，结点的聚合半径（最高邻居结点的阶数）也变大，一旦达到某个阈值，该结点覆盖全图结点。</li>\n<li><strong>但是</strong>，如果层数很多，每个结点覆盖的结点都会收敛到全图，这就导致每个结点的局部网络结构的多样性大大降低，对于结点自身特征的学习反而不好。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"gcn基本模型概述\"><a class=\"markdownIt-Anchor\" href=\"#gcn基本模型概述\">#</a> GCN 基本模型概述</h4>\n<ul>\n<li>适合做<strong>半监督任务</strong>，用某个结点的少量数据也能进行训练</li>\n</ul>\n<h4 id=\"图卷积的基本计算方法\"><a class=\"markdownIt-Anchor\" href=\"#图卷积的基本计算方法\">#</a> 图卷积的基本计算方法</h4>\n<ul>\n<li>\n<p>GCN 基本思想：</p>\n<p>​\t<strong>消息传递 / 聚合</strong>，即<u>平均其自身与邻居特征后传入神经网络</u>（下图橙色结点为例）。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa89f11ddac507cc6c5660.png\" alt=\"\"></p>\n</li>\n<li>\n<p>网络层数：</p>\n<p>​    GCN 可以做多层，但一般浅做 2、3 层较合适 (6 个人认识全世界理论)，不会很多层</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa89f11ddac507cc6c5759.png\" alt=\"\"></p>\n<p>​                                                 <u>最后得到每个点的特征向量</u></p>\n</li>\n<li>\n<p>图中基本组成：</p>\n<ul>\n<li>\n<p><strong>G</strong>—— 图</p>\n</li>\n<li>\n<p><strong>A</strong>—— 邻接矩阵</p>\n</li>\n<li>\n<p><strong>D</strong>—— 各个结点</p>\n</li>\n<li>\n<p><strong>F</strong>—— 每个结点的特征</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa89f11ddac507cc6c582c.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>特征计算方法：</p>\n<ul>\n<li><strong>矩阵乘法</strong></li>\n<li><img src=\"https://pic.imgdb.cn/item/64aa89f21ddac507cc6c5915.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"邻接的矩阵的变换\"><a class=\"markdownIt-Anchor\" href=\"#邻接的矩阵的变换\">#</a> 邻接的矩阵的变换</h4>\n<ul>\n<li>考虑自身（将度矩阵考虑进去）</li>\n<li>左乘对<strong>行</strong>做<u>归一化</u>操作 + 右乘对<strong>列</strong>做<u>归一化</u>操作（归一化：简化计算的操作）</li>\n</ul>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t大致想法（下图）</p>\n<ul>\n<li><img src=\"https://pic.imgdb.cn/item/64aa8a1e1ddac507cc6ccd3f.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"ugcn基本原理定义u\"><a class=\"markdownIt-Anchor\" href=\"#ugcn基本原理定义u\">#</a> <u>GCN 基本原理 / 定义</u></h4>\n<ul>\n<li>\n<p><img src=\"https://pic.imgdb.cn/item/64aa8a1e1ddac507cc6cce0d.png\" alt=\"\"></p>\n<ul>\n<li><strong>ReLU</strong>，全称为：Rectified Linear Unit，是一种人工神经网络中常用的激活函数，通常意义下，其指代数学中的斜坡函数，即 <u>f ( x ) = max ⁡ ( 0 , x )</u><br>\n<img src=\"https://pic.imgdb.cn/item/64aa8a1e1ddac507cc6ccf50.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>\n<p>GCN 层数</p>\n<ul>\n<li>在多个图数据集中，都可以发现两三层比较合适，多反而差了。</li>\n<li><img src=\"https://pic.imgdb.cn/item/64aa8a1f1ddac507cc6cd107.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"pytorch-geometric工具包安装与配置方法略\"><a class=\"markdownIt-Anchor\" href=\"#pytorch-geometric工具包安装与配置方法略\">#</a> PyTorch Geometric 工具包安装与配置方法（略）</h4>\n<ul>\n<li>\n<p><a href=\"https://www.bilibili.com/video/BV1j8411876K?p=12&amp;vd_source=d1abfb72c73986bf3b64ed4a087cdf09%EF%BC%88\">https://www.bilibili.com/video/BV1j8411876K?p=12&amp;vd_source=d1abfb72c73986bf3b64ed4a087cdf09（</a><u>Pytorch Gepmetric</u>）</p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/pointer_onlysoul/article/details/121354353?utm_medium=distribute.pc_relevant.none-task-blog-2\">https://blog.csdn.net/pointer_onlysoul/article/details/121354353?utm_medium=distribute.pc_relevant.none-task-blog-2</a><sub>default</sub>baidujs_baidulandingword~default-0-121354353-blog-109139329.235<sup>v35</sup>pc_relevant_default_base3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1</p>\n<p>（<u>Anaconda+PyTorch 安装（非英伟达显卡 + win10+Python3.8）</u>）</p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/C_chuxin/article/details/82690093\">https://blog.csdn.net/C_chuxin/article/details/82690093</a></p>\n<p>​\t\t\t\t(本<u>地 python 库与新装 Anaconda 库并存</u>)</p>\n</li>\n</ul>\n<h4 id=\"数据集与邻接矩阵格式karateclub空手道俱乐部案例\"><a class=\"markdownIt-Anchor\" href=\"#数据集与邻接矩阵格式karateclub空手道俱乐部案例\">#</a> 数据集与邻接矩阵格式（——KarateClub 空手道俱乐部案例）</h4>\n<ul>\n<li>\n<p>Graph Neural Networks</p>\n<ul>\n<li>\n<p>致力于解决<strong>不规则</strong>数据结构 (图像和文本相对格式都固定，但是社交网络与化学分子等格式肯定不是固定的)。</p>\n</li>\n<li>\n<p>GNN 模型<u>迭代更新</u>主要基于图中每个节点及其<strong>邻居</strong>的信息。</p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa8a1f1ddac507cc6cd174.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>数据集</strong>: <u><strong>Zachary’s karate club network</strong></u></p>\n<ul>\n<li>该图描述了一个空手道俱乐部会员的社交关系，以 34 名会员作为节点，如果两位会员在俱乐部之外仍保持社交关系，则在节点间增加一条边。每人节点具有一个 34 维的特征向量，一共有 78 条边。在收集数据的过程中，管理人员 John A 和教练 Mr.Hi 之间产生了冲突，会员们选择了站队，一半会员跟随 Mr.Hi 成立了新俱乐部，剩下一半会员找了新教练或退出了俱乐部。</li>\n</ul>\n</li>\n<li>\n<p>代码实现：</p>\n<ul>\n<li>\n<p>获取数据集，打印基础数据指标</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torch_geometric.datasets <span class=\"keyword\">import</span> KarateClub</span><br><span class=\"line\"></span><br><span class=\"line\">dataset = KarateClub()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Dataset: <span class=\"subst\">&#123;dataset&#125;</span>:&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;======================&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Number of graphs: <span class=\"subst\">&#123;<span class=\"built_in\">len</span>(dataset)&#125;</span>&#x27;</span>)  <span class=\"comment\"># 图的数量—1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Number of features: <span class=\"subst\">&#123;dataset.num_features&#125;</span>&#x27;</span>) <span class=\"comment\"># 特征个数—34</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Number of classes: <span class=\"subst\">&#123;dataset.num_classes&#125;</span>&#x27;</span>)  <span class=\"comment\"># 数据种类—4</span></span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">    Dataset: KarateClub():</span><br><span class=\"line\">    ======================</span><br><span class=\"line\">    Number of graphs: <span class=\"number\">1</span></span><br><span class=\"line\">    Number of features: <span class=\"number\">34</span></span><br><span class=\"line\">    Number of classes: <span class=\"number\">4</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>PyTorch Geometric 中的每个图形都由单个 Data 对象表示，该对象包含描述其图形表示的所有信息。我们可以随时打印数据对象，以接收有关其属性及其形状的简短摘要：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = dataset[<span class=\"number\">0</span>]  <span class=\"comment\"># Get the first graph object.</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;=========================================================&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">    Data(x=[<span class=\"number\">34</span>, <span class=\"number\">34</span>], edge_index=[<span class=\"number\">2</span>, <span class=\"number\">156</span>], y=[<span class=\"number\">34</span>], train_mask=[<span class=\"number\">34</span>])</span><br><span class=\"line\">\t===========================================================</span><br><span class=\"line\">    </span><br><span class=\"line\">    该数据对象具有<span class=\"number\">4</span>个属性：</span><br><span class=\"line\">    （<span class=\"number\">1</span>）edge_index：<span class=\"string\">&quot;2+边的个数&quot;</span>，属性保存有关图连接性的信息，即每个边缘的源节点和目标节点。 </span><br><span class=\"line\">    （<span class=\"number\">2</span>）PyG进一步将节点特征称为x（为<span class=\"number\">34</span>个节点中的每个节点分配了一个<span class=\"number\">34</span>维特征向量），前面表示样本数量，后面表示特征维度。</span><br><span class=\"line\">    （<span class=\"number\">3</span>）节点标签称为y（每个节点被精确地分配为一个类别）。 </span><br><span class=\"line\">    （<span class=\"number\">4</span>）还有一个名为train_mask的附加属性，它描述了我们已经知道其社区归属的节点。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>详细检查 edge_index 的属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> IPython.display <span class=\"keyword\">import</span> Javascript  </span><br><span class=\"line\">display(Javascript(<span class=\"string\">&#x27;&#x27;&#x27;google.colab.output.setIframeHeight(0, true, &#123;maxHeight: 300&#125;)&#x27;&#x27;&#x27;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">edge_index = data.edge_index</span><br><span class=\"line\"><span class=\"built_in\">print</span>(edge_index.t())</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">    &lt;IPython.core.display.Javascript <span class=\"built_in\">object</span>&gt;</span><br><span class=\"line\">tensor([[ <span class=\"number\">0</span>,  <span class=\"number\">1</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">2</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">3</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">4</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">5</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">6</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">7</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>,  <span class=\"number\">8</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">10</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">11</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">12</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">13</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">17</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">19</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">21</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0</span>, <span class=\"number\">31</span>],</span><br><span class=\"line\">        ........</span><br><span class=\"line\">        [<span class=\"number\">33</span>,  <span class=\"number\">8</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>,  <span class=\"number\">9</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">13</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">14</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">18</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">19</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">22</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">23</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">26</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">27</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">28</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">29</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">30</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">31</span>],</span><br><span class=\"line\">        [<span class=\"number\">33</span>, <span class=\"number\">32</span>]])</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>networkx 可视化展示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入使用的模块包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> IPython.core.display_functions <span class=\"keyword\">import</span> display</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_geometric.datasets <span class=\"keyword\">import</span> KarateClub</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_geometric.utils <span class=\"keyword\">import</span> to_networkx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义最后可视化的函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">visualize</span>(<span class=\"params\">h, color, epoch=<span class=\"literal\">None</span>, loss=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    plt.figure(figsize=(<span class=\"number\">7</span>, <span class=\"number\">7</span>))</span><br><span class=\"line\">    plt.xticks([])</span><br><span class=\"line\">    plt.yticks([])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> torch.is_tensor(h):</span><br><span class=\"line\">        h = h.detach().cpu().numpy()</span><br><span class=\"line\">        plt.scatter(h[:, <span class=\"number\">0</span>], h[:, <span class=\"number\">1</span>], s=<span class=\"number\">140</span>, c=color, cmap=<span class=\"string\">&quot;Set2&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> epoch <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> loss <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            plt.xlabel(<span class=\"string\">f&#x27;Epoch: <span class=\"subst\">&#123;epoch&#125;</span>, Loss: <span class=\"subst\">&#123;loss.item():<span class=\"number\">.4</span>f&#125;</span>&#x27;</span>, fontsize=<span class=\"number\">16</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        nx.draw_networkx(G, pos=nx.spring_layout(G, seed=<span class=\"number\">42</span>), with_labels=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                         node_color=color, cmap=<span class=\"string\">&quot;Set2&quot;</span>)</span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\">G = to_networkx(data, to_undirected=<span class=\"literal\">True</span>)\t<span class=\"comment\">#data上述步骤已给</span></span><br><span class=\"line\">visualize(G, color=data.y)</span><br></pre></td></tr></table></figure>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<u><strong>可视化</strong></u></p>\n</li>\n<li>\n<p><img src=\"https://pic.imgdb.cn/item/64aa8a441ddac507cc6d246b.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"模型定义与训练方法\"><a class=\"markdownIt-Anchor\" href=\"#模型定义与训练方法\">#</a> 模型定义与训练方法</h4>\n<ul>\n<li>\n<p>模型定义</p>\n<ul>\n<li>\n<p>三层 GCN</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> Linear</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_geometric.nn <span class=\"keyword\">import</span> GCNConv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GCN</span>(torch.nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(GCN, self).__init__()</span><br><span class=\"line\">        torch.manual_seed(<span class=\"number\">1234</span>)</span><br><span class=\"line\">        self.conv1 = GCNConv(dataset.num_features, <span class=\"number\">4</span>)</span><br><span class=\"line\">        self.conv2 = GCNConv(<span class=\"number\">4</span>, <span class=\"number\">4</span>)\t<span class=\"comment\"># 数字表示维度</span></span><br><span class=\"line\">        self.conv3 = GCNConv(<span class=\"number\">4</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">        self.classifier = Linear(<span class=\"number\">2</span>, dataset.num_classes)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, x, edge_index</span>):       <span class=\"comment\"># edge_index 为邻接矩阵</span></span><br><span class=\"line\">        h = self.conv1(x, edge_index)</span><br><span class=\"line\">        h = h.tanh()    <span class=\"comment\"># 双曲正切函数</span></span><br><span class=\"line\">        h = self.conv2(h, edge_index)</span><br><span class=\"line\">        h = h.tanh()</span><br><span class=\"line\">        h = self.conv3(h, edge_index)</span><br><span class=\"line\">        h = h.tanh()  <span class=\"comment\"># Final GNN embedding space.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Apply a final (linear) classifier.    全连接</span></span><br><span class=\"line\">        out = self.classifier(h)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> out, h</span><br><span class=\"line\"></span><br><span class=\"line\">model = GCN()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(model)</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">    GCN(</span><br><span class=\"line\">  (conv1): GCNConv(<span class=\"number\">34</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">  (conv2): GCNConv(<span class=\"number\">4</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">  (conv3): GCNConv(<span class=\"number\">4</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">  (classifier): Linear(in_features=<span class=\"number\">2</span>, out_features=<span class=\"number\">4</span>, bias=<span class=\"literal\">True</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>输出特征展示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">_, h = model(data.x, data.edge_index)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Embedding shape: <span class=\"subst\">&#123;<span class=\"built_in\">list</span>(h.shape)&#125;</span>&#x27;</span>)</span><br><span class=\"line\">visualize(h, color=data.y)</span><br></pre></td></tr></table></figure>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<u><strong>可视化</strong></u></p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa8a441ddac507cc6d24ec.png\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>训练模型</strong>（半监督，semi—supervised）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> IPython.display <span class=\"keyword\">import</span> Javascript  <span class=\"comment\"># Restrict height of output cell.</span></span><br><span class=\"line\"></span><br><span class=\"line\">display(Javascript(<span class=\"string\">&#x27;&#x27;&#x27;google.colab.output.setIframeHeight(0, true, &#123;maxHeight: 430&#125;)&#x27;&#x27;&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">criterion = torch.nn.CrossEntropyLoss()  <span class=\"comment\"># Define loss criterion.</span></span><br><span class=\"line\">optimizer = torch.optim.Adam(model.parameters(), lr=<span class=\"number\">0.01</span>)  <span class=\"comment\"># Define optimizer.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">train</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    optimizer.zero_grad()  <span class=\"comment\"># Clear gradients.</span></span><br><span class=\"line\">    out, h = model(data.x, data.edge_index)  <span class=\"comment\"># Perform a single forward pass.</span></span><br><span class=\"line\">    loss = criterion(out[data.train_mask],</span><br><span class=\"line\">                     data.y[data.train_mask])  <span class=\"comment\"># Compute the loss solely based on the training nodes.</span></span><br><span class=\"line\">    loss.backward()  <span class=\"comment\"># Derive gradients.</span></span><br><span class=\"line\">    optimizer.step()  <span class=\"comment\"># Update parameters based on gradients.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> loss, h</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">401</span>):</span><br><span class=\"line\">    loss, h = train(data)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> epoch % <span class=\"number\">10</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        visualize(h, color=data.y, epoch=epoch, loss=loss)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.3</span>)</span><br></pre></td></tr></table></figure>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<strong><u>可视化</u></strong></p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa8a451ddac507cc6d26b7.png\" alt=\"\"></p>\n<p><img src=\"https://pic.imgdb.cn/item/64aa8a461ddac507cc6d27a9.png\" alt=\"\"></p>\n</li>\n</ul>\n",
            "tags": [
                "GNN"
            ]
        },
        {
            "id": "http://aer0liteee.github.io/post/e73517db.html",
            "url": "http://aer0liteee.github.io/post/e73517db.html",
            "title": "SQL注入",
            "date_published": "2023-07-02T02:11:52.000Z",
            "content_html": "<h3 id=\"sql注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入\">#</a> SQL 注入</h3>\n<ul>\n<li>\n<p>概念：</p>\n<ul>\n<li>所谓的 sql 注入就是通过某种方式<strong>将恶意的 sql 代码添加到输入参数</strong>中，然后传递到 sql 服务器使其解析并执行的一种攻击手法。</li>\n</ul>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li>\n<p>假设有一个登录表单，应用程序使用提交的用户名和密码来构建 SQL 查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$username = $_POST[&#x27;username&#x27;];</span><br><span class=\"line\">$password = $_POST[&#x27;password&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">$sql = &quot;SELECT * FROM users WHERE username = &#x27;$username&#x27; AND password = &#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure>\n<p>如果应用程序没有对用户输入进行适当的处理和转义，攻击者可能会在用户名字段中输入恶意代码，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;--</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，构建的 SQL 查询将变成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE username = &#x27;&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;--&#x27; AND password = &#x27;$password&#x27;</span><br></pre></td></tr></table></figure>\n<p>这个查询的条件始终成立（‘1’=‘1’），绕过了密码验证，从而使攻击者能够成功登录或绕过应用程序的安全措施。</p>\n<p>为了防止 SQL 注入攻击，应用程序应该始终对用户输入进行验证、过滤和转义。最好的防御措施之一是使用参数化查询或预编译语句，它们可以防止恶意的 SQL 代码注入。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>基本步骤</p>\n<ul>\n<li>\n<p><strong>SQL 注入步骤</strong><br>\n（1）判断是否存在注入，注入是字符型还是数字型</p>\n<blockquote>\n<p>​\t\t首先 id 后面加单引号 查看是否可能存在 sql 注入，返回正常，不存在；返回不正常，存在</p>\n</blockquote>\n<p>（2）猜解 SQL 查询语句中的字段数<br>\n（3）判断哪些位置字段可以注入利用<br>\n（4）查询数据库（当前使用数据库或所有数据库）<br>\n（5）查询指定数据库中的表<br>\n（6）查询指定表中的字段名<br>\n（7）查询表中字段的值</p>\n</li>\n</ul>\n</li>\n<li>\n<p>常见方式：</p>\n<ul>\n<li>\n<p>可以将 SQL 注入分为两大类：<br>\n<strong>非盲注</strong>和<strong>盲注</strong>，<u>非盲注就是有报错回显</u>，<u>盲注就是没有报错回显</u></p>\n</li>\n<li>\n<p>常见的 SQL 注入方法有：</p>\n<ul>\n<li>\n<p><strong>联合注入</strong></p>\n<ul>\n<li>\n<p>原理<br>\n（1）<strong>union select</strong> 定义<br>\n将多个 SELECT 语句的结果合并到一个结果集中<br>\n（2）mysql 直观测试</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">复制代码<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> users <span class=\"keyword\">WHERE</span> id<span class=\"operator\">=</span><span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>相关函数</p>\n<ul>\n<li>group_concat (参数 1，参数 2，参数 3 等等无数个参数) 语法： <strong>group_concat</strong> 函数<u>返回一个字符串结果</u>(就是返回一行)，该结果由括号中的各个参数值执行然后连接组合而成</li>\n<li>char ()：还原 ASCII 码为字符</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>布尔盲注</strong></p>\n<ul>\n<li>\n<p>原理<br>\n Web 的页面的<u>仅仅会返回 True 和 False</u>，那么布尔盲注就是根据页面返回的 True 或者是 False 来得到数据库中的相关信息</p>\n</li>\n<li>\n<p>相关函数解析</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">length：返回值为字符串的字节长度</span><br><span class=\"line\">ascii：把字符转换成ascii码值的函数</span><br><span class=\"line\">substr(str, pos, len)：在str中从pos开始的位置（起始位置为1），截取len个字符</span><br><span class=\"line\">count：统计表中记录的一个函数，返回匹配条件的行数</span><br><span class=\"line\">limit：</span><br><span class=\"line\">     limit m ：检索前m行数据，显示1-10行数据（m&gt;0）</span><br><span class=\"line\">     limit(x,y)：检索从x+1行开始的y行数据</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>时间盲注</strong></p>\n<ul>\n<li>\n<p>原理：</p>\n<ul>\n<li>时间盲注的一般思路是延迟注入，就是利用<strong> sleep ()<strong> 或</strong> benchmark ()<strong> 等函数让 mysql 执行时间变长并结合判断条件语句 if (expr1,expr2,expr3)，然后</strong>通过页面的响应时间长短</strong>来判断语句返回的值是 True 还是 False，从而猜解一些未知的字段</li>\n</ul>\n</li>\n<li>\n<p>相关函数：</p>\n<ul>\n<li>if (expr1,expr2,expr3)： expr1 的值为 TRUE，则返回值为 expr2 ；expr1 的值为 FALSE，则返回值为 expr3<br>\nsleep (n)：延迟响应时间 n 秒</li>\n</ul>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li>\n<p>假设有一个搜索功能，用户可以在网站上搜索电影标题。搜索功能的查询语句通过将用户提供的搜索关键字嵌入到 SQL 查询中来生成结果。例如，查询语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM movies WHERE title LIKE &#x27;%用户输入的关键字%&#x27;</span><br></pre></td></tr></table></figure>\n<p>这个查询语句会返回包含用户搜索关键字的电影标题。</p>\n<p>攻击者可以利用时间盲注来判断特定条件是否满足，例如是否存在一个特定的电影。</p>\n<p>假设攻击者要判断电影名称为 “The Matrix” 是否存在。攻击者可以通过向搜索字段输入恶意的搜索字符串来触发时间延迟，如果延迟时间较长，则可以推断条件为真，否则推断为假。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">搜索关键字：&#x27; OR IF(SUBSTRING((SELECT title FROM movies WHERE title = &#x27;The Matrix&#x27;),1,1)=&#x27;T&#x27;, SLEEP(5), 0) AND &#x27;1%&#x27;=&#x27;1</span><br></pre></td></tr></table></figure>\n<p>在上述示例中，攻击者通过构造恶意的搜索字符串进行注入。该字符串使用  <code>IF</code>  函数和  <code>SLEEP</code>  函数来引起延迟，在查询执行期间等待 5 秒钟。如果条件  <code>SUBSTRING((SELECT title FROM movies WHERE title = 'The Matrix'),1,1)='T'</code>  为真，即判断电影名称的第一个字符是 ‘T’，则会发生延迟。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>宽字节注入</strong></p>\n<ul>\n<li>\n<p>原理：</p>\n<ul>\n<li>当存在宽字节注入的时候，注入参数里带入％df％27，即可把（％5c）吃掉，也就是 % df 和 %5c 结合成了汉字運</li>\n</ul>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li></li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$userid = $_GET[&#x27;id&#x27;];</span><br><span class=\"line\">$query = &quot;SELECT * FROM users WHERE id = &#x27;$userid&#x27;&quot;;</span><br></pre></td></tr></table></figure>\n<p>在正常情况下，如果用户提供的  <code>id</code>  参数是单字节编码，应用程序会将其包含在查询字符串中。然而，通过在  <code>id</code>  参数中使用宽字节编码，攻击者可以绕过过滤机制，将恶意注入的 SQL 代码作为有效数据执行。例如，假设攻击者提供的  <code>id</code>  参数是  <code>%bf' OR '1'='1</code> ，其中  <code>%bf</code>  是宽字节编码的  <code>'</code>  。</p>\n<p>在这种情况下，构建的 SQL 查询变成了：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE id = &#x27;�&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;</span><br></pre></td></tr></table></figure>\n<p>这将导致查询条件始终为真（‘1’=‘1’），从而绕过了应用程序的身份验证，可能导致数据泄露、修改或其他安全问题。</p>\n<p>为了防止宽字节注入攻击，应用程序应该正确处理和验证输入的数据，特别是字符编码方面。建议采用参数化查询或使用安全的编码和解码机制，以避免受到这种类型的注入攻击。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>报错注入</strong></p>\n<ul>\n<li>\n<p>原理：</p>\n<ul>\n<li>报错注入是通过特殊函数错误使用并使其输出错误结果来获取信息的。</li>\n</ul>\n</li>\n<li>\n<p>相关函数：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">·<span class=\"built_in\">concat</span>()函数：用于将多个字符串连接成一个字符串</span><br><span class=\"line\">·<span class=\"built_in\">floor</span>(x) 函数：返回小于 x 的最大整数值</span><br><span class=\"line\">·<span class=\"built_in\">rand</span>()函数调：用可以在<span class=\"number\">0</span>和<span class=\"number\">1</span>之间产生一个随机数</span><br><span class=\"line\">·group by语句：根据一个或多个列对结果集进行分组</span><br><span class=\"line\">·<span class=\"built_in\">updatexml</span>(目标xml文档，xml路径，更新的内容)：更新xml文档的函数，xpath_expr： 需要更新的xml路径(Xpath格式)</span><br><span class=\"line\">·new_xml： 更新后的内容</span><br><span class=\"line\">此函数用来更新选定XML片段的内容，将XML标记的给定片段的单个部分替换为 xml_target 新的XML片段 new_xml ，然后返回更改的XML。xml_target替换的部分 与xpath_expr 用户提供的XPath表达式匹配。</span><br><span class=\"line\"><span class=\"built_in\">extractvalue</span>(目标xml文档，xml路径)：对XML文档进行查询的函数，一个XML标记片段 xml_frag和一个XPath表达式 xpath_expr（也称</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li>\n<p>假设有一个登录页面，您需要输入用户名和密码进行身份验证。该应用程序使用以下查询语句进行验证：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE username = &#x27;输入的用户名&#x27; AND password = &#x27;输入的密码&#x27;</span><br></pre></td></tr></table></figure>\n<p>攻击者可以使用报错注入来利用应用程序中的错误消息来获取敏感信息，例如数据库的名称、表的名称等。</p>\n<p>以下是一个示例的报错注入攻击：</p>\n<p>假设攻击者要尝试通过报错注入来获取数据库的名称。攻击者在用户名字段中输入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27; OR 1=1 ORDER BY 1--</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，攻击者向用户名字段中注入了恶意代码，即  <code>' OR 1=1 ORDER BY 1--</code> 。这段代码仅仅是为了触发报错，而不是以正常的方式进行身份验证。</p>\n<p>当应用程序执行查询时，由于注入的代码的存在，查询将变成以下形式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE username = &#x27;&#x27; OR 1=1 ORDER BY 1--&#x27; AND password = &#x27;输入的密码&#x27;</span><br></pre></td></tr></table></figure>\n<p>上述查询中的  <code>ORDER BY 1</code>  是一种常见的错误引起的操作。如果查询执行成功，将不会发生错误，但如果查询失败，应用程序通常会显示错误消息或异常信息。</p>\n<p>通过观察错误消息或异常信息，攻击者可以推断出数据库的名称，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error: Unknown column &#x27;1&#x27; in &#x27;order clause&#x27;</span><br></pre></td></tr></table></figure>\n<p>从错误消息中，攻击者可以推断出数据库中存在一个名为  <code>1</code>  的列，这暗示了数据库中的一些结构信息。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>堆叠注入</strong></p>\n<ul>\n<li>\n<p>原理</p>\n<ul>\n<li>堆叠注入与受限于 select 语句的联合查询法相反，堆叠注入可用于执行任意 SQL 语句，<u>简单地说就是 MYSQL 的多语句查询</u></li>\n<li>堆叠注入的局限性：堆叠注入并不是在任何换环境下都可以执行的，可能受到 API 或者数据库引擎不支持的限制（如 Oracle 数据库），也有可能权限不足。web 系统中，因为代码通常只返回一个查询结果，因此堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。</li>\n</ul>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li>\n<p>假设我们有一个简单的登录表单，用于验证用户的用户名和密码。应用程序使用传递的用户名和密码构建 SQL 查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$username = $_POST[&#x27;username&#x27;];</span><br><span class=\"line\">$password = $_POST[&#x27;password&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">$sql = &quot;SELECT * FROM users WHERE username = &#x27;$username&#x27; AND password = &#x27;$password&#x27;&quot;;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，应用程序没有正确地验证和过滤用户输入，存在 SQL 注入漏洞。</p>\n<p>下面是堆叠注入的示例攻击：</p>\n<p>假设攻击者在用户名字段中输入了以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin&#x27; OR 1=1; --</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，构建的 SQL 查询将变成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE username = &#x27;admin&#x27; OR 1=1; --&#x27; AND password = &#x27;$password&#x27;</span><br></pre></td></tr></table></figure>\n<p>这个查询中的  <code>OR 1=1; --</code>  部分是攻击者注入的恶意代码。它将使查询条件始终为真，因为  <code>1=1</code>  恒为真。 <code>--</code>  是 SQL 的注释标记，用于注释掉原始查询中的剩余部分。结果是，攻击者可以成功绕过身份验证，登录到系统中，即使他们提供了错误的密码。</p>\n<p><strong>堆叠注入的关键是在注入点中添加分号  <code>;</code>  来结束原始查询，然后添加额外的 SQL 语句来实现攻击者想要的恶意行为。这种技术可用于执行任意的 SQL 语句，如插入、更新或删除数据，甚至执行系统命令等。</strong></p>\n<p>要防止堆叠注入攻击，应用程序应该对所有用户输入进行正确的验证和转义，或者更好地使用参数化查询或预编译语句。这样可以防止注入的 SQL 代码被认为是有效的查询语句的一部分。确保在编写应用程序时实施严格的输入验证和过滤机制是至关重要的，以减少安全漏洞的出现</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>二次注入</strong></p>\n<ul>\n<li>\n<p>原理</p>\n<ul>\n<li>\n<p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到 SQL 查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中（比如虽然参数在过滤后会添加 &quot;“进行转义，但是”&quot; 并不会插入到数据库中），当<u>Web 程序调用存储在数据库中的恶意数据并执行 SQL 查询时，就发生了 SQL 二次注入</u>。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe7f5e853e9b4717949e71a1d10c229b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"在这里插入图片描述\"></p>\n<p>二次注入，可以概括为以下两步：</p>\n</li>\n<li>\n<p>第一步：插入恶意数据</p>\n<ul>\n<li>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</li>\n</ul>\n</li>\n<li>\n<p>第二步：引用恶意数据</p>\n<ul>\n<li>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>示例：</p>\n<ul>\n<li>\n<p>用户 A 在评论中输入以下内容：  <code>Nice post! Please check out my website at www.example.com'; DELETE FROM comments; --</code></p>\n<p>应用程序将评论内容存储在数据库中，但并不立即执行。当其他用户访问留言板页面时，应用程序从数据库中获取评论并将其显示在页面上。在获取评论的过程中，存在不当的代码执行，导致用户 A 注入的恶意代码被执行。</p>\n</li>\n<li>\n<p>在这个示例中，用户 A 在评论中注入了一个恶意代码，即  <code>'; DELETE FROM comments; --</code> 。这段代码旨在删除数据库中的评论表中的所有内容。由于应用程序在处理评论时存在漏洞，并没有正确地过滤或转义用户输入，导致注入的恶意代码被存储在数据库中。当其他用户访问留言板页面时，应用程序从数据库中检索评论并显示在页面上，但由于存在不当的代码执行，导致用户 A 注入的恶意代码被执行，从而删除了评论表中的所有内容。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>SQLMap 使用</p>\n<ul>\n<li>\n<p>常见参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">diff复制代码-u：指定含有参数的URL</span><br><span class=\"line\">--dbs：爆出数据库</span><br><span class=\"line\">--batch：默认选择执行</span><br><span class=\"line\">--random-agent：使用随机user-agent</span><br><span class=\"line\">-r：POST注入</span><br><span class=\"line\">--level：注入等级，一共有5个等级（1-5） 不加 level 时，默认是1，5级包含的payload最多，会自动破解出cookie、XFF等头部注入，相对应他的速度也比较慢</span><br><span class=\"line\">--timeout：设定重试超时</span><br><span class=\"line\">--cookie：设置cookie信息</span><br><span class=\"line\">--flush-session：删除指定目标缓存，重新对该目标进行测试</span><br><span class=\"line\">--tamper：使用waf绕过脚本</span><br><span class=\"line\">--time-sec：设定延时时间，默认是5秒</span><br><span class=\"line\">--thread：多线程，默认为1，最大为10</span><br><span class=\"line\">--keep-live： sqlmap默认是一次连接成功后马上关闭；HTTP报文中相当于Connection: Close（一次连接马上关闭）。要扫描站点的URL</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>对 url 进行检测，判断是否存在 SQL 注入</strong></p>\n<ul>\n<li>python <a href=\"http://sqlmap.py\">sqlmap.py</a> -u “url” --batch</li>\n</ul>\n</li>\n<li>\n<p><strong>获取数据库</strong></p>\n<ul>\n<li>python <a href=\"http://sqlmap.py\">sqlmap.py</a> -u URL --dbs --batch 获取全部数据库</li>\n<li>python <a href=\"http://sqlmap.py\">sqlmap.py</a> -u URL --current-db --batch 获取当前数据库</li>\n</ul>\n</li>\n<li>\n<p><a href=\"http://sqlmap.py\">sqlmap.py</a> -u “<a href=\"http://url/news?id=1\">http://url/news?id=1</a>”  --dump -C “column_name” -T “table_name” -D “db_name”</p>\n</li>\n<li>\n<p><strong>POST 注入</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap -u “http://url/news/” --data=&quot;id=2” --cookie=&quot;&quot; //加cookie</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>使用 sqlmap 自带的过 waf 脚本：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlmap.py -u “http://test.com/test.php?Id=1” --tamper[“脚本名称”]（如果脚本失效，可以自定义脚本）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Web"
            ]
        },
        {
            "id": "http://aer0liteee.github.io/post/4a17b156.html",
            "url": "http://aer0liteee.github.io/post/4a17b156.html",
            "title": "Hello World",
            "date_published": "2023-07-01T01:43:38.368Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}